<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model>
    <ParentClass DisplayName="NetworkTransport">Networking.NetworkTransport</ParentClass>
    <Section>
      <Signature>
        <Declaration name="Send" type="function" modifiers="public static" Obsolete="" />
        <ParamElement name="hostId" type="int" />
        <ParamElement name="connectionId" type="int" />
        <ParamElement name="channelId" type="int" />
        <ParamElement name="buffer" type="byte[]" />
        <ParamElement name="size" type="int" />
        <ParamElement name="error" type="byte" modifier="out" />
        <ReturnType>bool</ReturnType>
      </Signature>
      <Summary><![CDATA[将数据发送到对等方。]]></Summary>
      <ParamWithDoc>
        <name>hostId</name>
        <doc><![CDATA[与此连接关联的主机 ID。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>connectionId</name>
        <doc><![CDATA[连接的 ID。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>channelId</name>
        <doc><![CDATA[用于发送数据的通道 ID。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>buffer</name>
        <doc><![CDATA[包含要发送的数据的缓冲区。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>size</name>
        <doc><![CDATA[缓冲区的大小。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>error</name>
        <doc><![CDATA[错误（可以转换为 ]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[ 以便了解更多信息）。]]></doc>
      </ParamWithDoc>
      <Description><![CDATA[用于利用发送方的 hostId 和 connectionId 将数据从一个连接发送到另一个连接。将要发送的数据作为字节数组放置到函数中，并附带数据的最大大小。要创建 channelID，请参阅 ]]><link ref="Networking.QosType">QosType</link><![CDATA[。
请务必使用 ]]><link ref="Networking.NetworkTransport.Receive">NetworkTransport.Receive</link><![CDATA[ 将接收方设置为监听正在发送的数据。]]></Description>
      <Example nocheck="false" convertexample="false">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[
//The script below shows how to set up connections ready to use ]]><link ref="Networking.NetworkTransport.Send">NetworkTransport.Send</link><br /><br /><![CDATA[//To make this work, create an empty ]]><link ref="GameObject">GameObject</link><![CDATA[ and attach this script]]><br /><br /><![CDATA[//Make sure there is a ]]><link ref="Networking.NetworkManager">NetworkManager</link><![CDATA[ in your ]]><link ref="SceneManagement.Scene">Scene</link><![CDATA[. To add one, click on a ]]><link ref="GameObject">GameObject</link><![CDATA[ and click the ]]><b>Add Component</b><![CDATA[ Button in the Inspector window. Go to ]]><b>Network</b><![CDATA[>]]><b>Network Manager</b><![CDATA[.]]><br /><br /><![CDATA[//Create 2 Buttons (]]><b>Create</b><![CDATA[>]]><b>UI</b><![CDATA[>]]><b>Button</b><![CDATA[), one for a client and the other a server.]]><br /><br /><![CDATA[//Create an ]]><link ref="Input">Input</link><![CDATA[ Field (]]><b>Create</b><![CDATA[>]]><b>UI</b><![CDATA[>]]><b>Input Field</b><![CDATA[).]]><br /><br /><![CDATA[//Attach all of these in the Inspector of your ]]><link ref="GameObject">GameObject</link><![CDATA[.]]><br /><br /><![CDATA[//Build and run a version of your ]]><link ref="SceneManagement.Scene">Scene</link><![CDATA[. Press the “server” button on this side.]]><br /><br /><![CDATA[//In the Unity ]]><link ref="Editor">Editor</link><![CDATA[, press the Play button to have a second version running. Click the client Button on this side. A text field should appear that allows you to type a message if your connection worked. Press the return or enter key to send this message from the “client” side using ]]><link ref="Networking.NetworkTransport.Send">NetworkTransport.Send</link><br /><br /><![CDATA[//The script then receives the message using ]]><link ref="Networking.NetworkTransport.Receive">NetworkTransport.Receive</link><![CDATA[, and outputs the message on the “server” side. Go to your built version of the ]]><link ref="Application">Application</link><![CDATA[ (server side) to see the message in your ]]><link ref="Input">Input</link><![CDATA[ Field.]]><br /><br /><![CDATA[using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;]]><br /><br /><![CDATA[public class Example : ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[
{
    int m_ServerSocket;
    int m_ClientSocket;
    int m_ConnectionID;
    byte m_ChannelID;]]><br /><br /><![CDATA[    ]]><link ref="Networking.HostTopology">HostTopology</link><![CDATA[ m_HostTopology;
    bool m_ClientsActive;
    string myText;]]><br /><br /><![CDATA[    //These are the Buttons that start the client and server, and the Button for sending messages
    //Assure that you assign these in the Inspector before testing
    public Button m_ClientButton, m_ServerButton;
    //This is the ]]><link ref="Input">Input</link><![CDATA[ Field for writing messages. Assign it in the Inspector.
    public ]]><link ref="UI.InputField">InputField</link><![CDATA[ m_InputField;]]><br /><br /><![CDATA[    void Start()
    {
        //Set this to false to indicate that the client hasn't connected yet
        m_ClientsActive = false;
        //Set the ]]><link ref="UI.Text">Text</link><![CDATA[ in the text field to this
        myText = "Please Type ]]><link ref="VersionControl.Message">Message</link><![CDATA[ Here...";]]><br /><br /><![CDATA[        //Set up the ]]><link ref="MemoryProfiler.Connection">Connection</link><![CDATA[ Configuration which holds channel information
        ]]><link ref="Networking.ConnectionConfig">ConnectionConfig</link><![CDATA[ config = new ]]><link ref="Networking.ConnectionConfig">ConnectionConfig</link><![CDATA[();
        //Add a reliable channel mode to the configuration (all messages delivered, not particularly in order)
        m_ChannelID = config.AddChannel(]]><link ref="Networking.QosType.Reliable">QosType.Reliable</link><![CDATA[);
        //Create a new Host information based on the configuration created, and the maximum connections allowed (20)
        m_HostTopology = new ]]><link ref="Networking.HostTopology">HostTopology</link><![CDATA[(config, 20);
        //Initialise the ]]><link ref="Networking.NetworkTransport">NetworkTransport</link><![CDATA[
        ]]><link ref="Networking.NetworkTransport.Init">NetworkTransport.Init</link><![CDATA[();]]><br /><br /><![CDATA[        //Call the ClientButton function when you click the Button
        m_ClientButton.onClick.AddListener(ClientButton);
        //Call the ServerButton function when you click the server Button
        m_ServerButton.onClick.AddListener(ServerButton);
        //Call the SendMessageField function when you press the return/enter key on the ]]><link ref="Input">Input</link><![CDATA[ Field
        m_InputField.onEndEdit.AddListener(delegate {SendMessageField(); });
    }]]><br /><br /><![CDATA[    //This is the function that serializes the message before sending it
    void SendMyMessage(string textInput)
    {
        byte error;
        byte[] buffer = new byte[1024];
        Stream message = new MemoryStream(buffer);
        BinaryFormatter formatter = new BinaryFormatter();
        //Serialize the message
        formatter.Serialize(message , textInput);]]><br /><br /><![CDATA[        //Send the message from the "client" with the serialized message and the connection information
        ]]><link ref="Networking.NetworkTransport.Send">NetworkTransport.Send</link><![CDATA[(m_ClientSocket , m_ConnectionID , m_ChannelID , buffer , (int)message.Position , out error);]]><br /><br /><![CDATA[        //If there is an error, output message error to the console
        if ((]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error != ]]><link ref="Networking.NetworkError.Ok">NetworkError.Ok</link><![CDATA[)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("]]><link ref="VersionControl.Message">Message</link><![CDATA[ send error: " + (]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error);
        }
    }]]><br /><br /><![CDATA[    void ]]><link ref="Experimental.PlayerLoop.Update">Update</link><![CDATA[()
    {
        //These are the variables that are replaced by the incoming message
        int outHostId;
        int outConnectionId;
        int outChannelId;
        byte[] buffer = new byte[1024];
        int receivedSize;
        byte error;]]><br /><br /><![CDATA[        //Set up the ]]><link ref="Network">Network</link><![CDATA[ Transport to receive the incoming message, and decide what type of event
        ]]><link ref="Networking.NetworkEventType">NetworkEventType</link><![CDATA[ eventType = ]]><link ref="Networking.NetworkTransport.Receive">NetworkTransport.Receive</link><![CDATA[(out outHostId, out outConnectionId, out outChannelId, buffer, buffer.Length, out receivedSize, out error);]]><br /><br /><![CDATA[        switch (eventType)
        {
            //Use this case when there is a connection detected
            case ]]><link ref="Networking.NetworkEventType.ConnectEvent">NetworkEventType.ConnectEvent</link><![CDATA[:
            {
                //Call the function to deal with the received information
                OnConnect(outHostId, outConnectionId, (]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error);
                break;
            }]]><br /><br /><![CDATA[            //This case is called if the event type is a data event, like the serialized message
            case ]]><link ref="Networking.NetworkEventType.DataEvent">NetworkEventType.DataEvent</link><![CDATA[:
            {
                //Call the function to deal with the received data
                OnData(outHostId, outConnectionId, outChannelId, buffer, receivedSize, (]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error);
                break;
            }]]><br /><br /><![CDATA[            case ]]><link ref="Networking.NetworkEventType.Nothing">NetworkEventType.Nothing</link><![CDATA[:
                break;]]><br /><br /><![CDATA[            default:
                //Output the error
                ]]><link ref="Debug.LogError">Debug.LogError</link><![CDATA[("Unknown network message type received: " + eventType);
                break;
        }]]><br /><br /><![CDATA[        //Make sure there is a connection first before showing the ]]><link ref="Input">Input</link><![CDATA[ Field
        m_InputField.gameObject.SetActive(m_ClientsActive);
        //Remove Buttons when there is a connection
        if (m_ClientsActive)
        {
            m_ClientButton.gameObject.SetActive(false);
            m_ServerButton.gameObject.SetActive(false);
        }
    }]]><br /><br /><![CDATA[    //This function is called when a connection is detected
    void OnConnect(int hostID, int connectionID, ]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[ error)
    {
        //Output the given information to the console
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("OnConnect(hostId = " + hostID + ", connectionId = "
            + connectionID + ", error = " + error.ToString() + ")");
        //There was a connection, so make this return true
        m_ClientsActive = true;
    }]]><br /><br /><![CDATA[    //This function is called when data is sent
    void OnData(int hostId, int connectionId, int channelId, byte[] data, int size, ]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[ error)
    {
        //Here the message being received is deserialized and output to the console
        Stream serializedMessage = new MemoryStream(data);
        BinaryFormatter formatter = new BinaryFormatter();
        string message = formatter.Deserialize(serializedMessage).ToString();]]><br /><br /><![CDATA[        //Output the deserialized message as well as the connection information to the console
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("OnData(hostId = " + hostId + ", connectionId = "
            + connectionId + ", channelId = " + channelId + ", data = "
            + message + ", size = " + size + ", error = " + error.ToString() + ")");]]><br /><br /><![CDATA[        m_InputField.text = "data = " + message;
    }]]><br /><br /><![CDATA[    void ClientButton()
    {
        byte error;
        m_ClientSocket = ]]><link ref="Networking.NetworkTransport.AddHost">NetworkTransport.AddHost</link><![CDATA[(m_HostTopology);
        //Connect the hostID to the port
        m_ConnectionID = ]]><link ref="Networking.NetworkTransport.Connect">NetworkTransport.Connect</link><![CDATA[(m_ClientSocket, "127.0.0.1", 54321, 0, out error);
        //If any errors arise from the connection, output it in the console
        if ((]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error != ]]><link ref="Networking.NetworkError.Ok">NetworkError.Ok</link><![CDATA[)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("]]><link ref="PackageManager.Error">Error</link><![CDATA[: " + (]]><link ref="Networking.NetworkError">NetworkError</link><![CDATA[)error);
        }
    }]]><br /><br /><![CDATA[    void ServerButton()
    {
        byte error;
        //Open the sockets for sending and receiving the messages on port 54321
        m_ServerSocket = ]]><link ref="Networking.NetworkTransport.AddHost">NetworkTransport.AddHost</link><![CDATA[(m_HostTopology, 54321);
        //Connect the "server"
        ]]><link ref="Networking.NetworkTransport.Connect">NetworkTransport.Connect</link><![CDATA[(m_ServerSocket, "127.0.0.1", 54321, 0, out error);
    }]]><br /><br /><![CDATA[    void SendMessageField()
    {
        //Check to see if a client has been chosen yet before showing the ]]><link ref="Experimental.UIElements.TextField">TextField</link><![CDATA[ and the Button
        //The ]]><link ref="UI.Text">Text</link><![CDATA[ from the ]]><link ref="UI.InputField">InputField</link><![CDATA[ is stored here
        myText = m_InputField.text;]]><br /><br /><![CDATA[        //Send the data message
        SendMyMessage(myText);
    }
}
]]></CSharp>
      </Example>
    </Section>
  </Model>
</Root>
