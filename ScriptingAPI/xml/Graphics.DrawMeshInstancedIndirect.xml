<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model>
    <ParentClass>Graphics</ParentClass>
    <Section>
      <Summary><![CDATA[使用 GPU 实例化多次绘制同一网格。]]></Summary>
      <ParamWithDoc>
        <name>mesh</name>
        <doc><![CDATA[要绘制的 ]]><link ref="Mesh">Mesh</link><![CDATA[。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>submeshIndex</name>
        <doc><![CDATA[要绘制网格的哪个子集。这只适用于由若干种材质构成的网格。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>material</name>
        <doc><![CDATA[要使用的 ]]><link ref="Material">Material</link><![CDATA[。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>bounds</name>
        <doc><![CDATA[围绕要绘制的实例的包围体。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>bufferWithArgs</name>
        <doc><![CDATA[GPU 缓冲区包含相应的参数，指示要绘制此网格的实例数。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>argsOffset</name>
        <doc><![CDATA[缓冲区中的字节偏移，绘制参数起始位置。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>properties</name>
        <doc><![CDATA[要应用的其他材质属性。请参阅 ]]><link ref="MaterialPropertyBlock">MaterialPropertyBlock</link><![CDATA[。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>castShadows</name>
        <doc><![CDATA[网格是否应投射阴影？]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>receiveShadows</name>
        <doc><![CDATA[网格是否应接受阴影？]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>layer</name>
        <doc><![CDATA[要使用的 ]]><link ref="../Manual/Layers">Layer</link><![CDATA[。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>camera</name>
        <doc><![CDATA[如果为 /null/（默认值），将在所有摄像机中绘制网格。否则，仅在给定摄像机中绘制网格。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>lightProbeUsage</name>
        <doc><![CDATA[实例的 ]]><link ref="Rendering.LightProbeUsage">LightProbeUsage</link><![CDATA[。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>lightProbeProxyVolume</name>
        <doc><![CDATA[]]></doc>
      </ParamWithDoc>
      <Description><![CDATA[类似于 ]]><link ref="Graphics.DrawMeshInstanced">Graphics.DrawMeshInstanced</link><![CDATA[，此函数用于绘制同一网格的多个实例，但与之不同的是，此函数中代表要绘制实例数的参数来自 /bufferWithArgs/。]]><br /><br /><![CDATA[如果您需要使用实例化的着色器多次绘制同一网格，则可以使用该函数。这些网格不会被视锥体或烘焙遮挡物做进一步的剔除处理，也不进行排序以提高透明度或 Z 效率。]]><br /><br /><![CDATA[带参数的缓冲区 ]]><varname>bufferWithArgs</varname><![CDATA[ 必须在给定的 ]]><varname>argsOffset</varname><![CDATA[ 偏移处具有五个整数：
每个实例的索引数、实例数、起始索引位置、基顶点位置、起始实例位置。]]><br /><br /><![CDATA[下面是一个可用于绘制同一网格的多个实例的脚本：]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[using UnityEngine;
using System.Collections;]]><br /><br /><![CDATA[public class ExampleClass : ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[ {
    public int instanceCount = 100000;
    public ]]><link ref="Mesh">Mesh</link><![CDATA[ instanceMesh;
    public ]]><link ref="Material">Material</link><![CDATA[ instanceMaterial;
    public int subMeshIndex = 0;]]><br /><br /><![CDATA[    private int cachedInstanceCount = -1;
    private int cachedSubMeshIndex = -1;
    private ]]><link ref="ComputeBuffer">ComputeBuffer</link><![CDATA[ positionBuffer;
    private ]]><link ref="ComputeBuffer">ComputeBuffer</link><![CDATA[ argsBuffer;
    private uint[] args = new uint[5] { 0, 0, 0, 0, 0 };]]><br /><br /><![CDATA[    void Start() {
        argsBuffer = new ]]><link ref="ComputeBuffer">ComputeBuffer</link><![CDATA[(1, args.Length * sizeof(uint), ]]><link ref="ComputeBufferType.IndirectArguments">ComputeBufferType.IndirectArguments</link><![CDATA[);
        UpdateBuffers();
    }]]><br /><br /><![CDATA[    void ]]><link ref="Experimental.PlayerLoop.Update">Update</link><![CDATA[() {
        // ]]><link ref="Experimental.PlayerLoop.Update">Update</link><![CDATA[ starting position buffer
        if (cachedInstanceCount != instanceCount || cachedSubMeshIndex != subMeshIndex)
            UpdateBuffers();]]><br /><br /><![CDATA[        // Pad input
        if (]]><link ref="Input.GetAxisRaw">Input.GetAxisRaw</link><![CDATA[("Horizontal") != 0.0f)
            instanceCount = (int)]]><link ref="Mathf.Clamp">Mathf.Clamp</link><![CDATA[(instanceCount + ]]><link ref="Input.GetAxis">Input.GetAxis</link><![CDATA[("Horizontal") * 40000, 1.0f, 5000000.0f);]]><br /><br /><![CDATA[        // Render
        ]]><link ref="Graphics.DrawMeshInstancedIndirect">Graphics.DrawMeshInstancedIndirect</link><![CDATA[(instanceMesh, subMeshIndex, instanceMaterial, new ]]><link ref="Bounds">Bounds</link><![CDATA[(]]><link ref="Vector3-zero">Vector3.zero</link><![CDATA[, new ]]><link ref="Vector3">Vector3</link><![CDATA[(100.0f, 100.0f, 100.0f)), argsBuffer);
    }]]><br /><br /><![CDATA[    void OnGUI() {
        ]]><link ref="GUI.Label">GUI.Label</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(265, 25, 200, 30), "Instance Count: " + instanceCount.ToString());
        instanceCount = (int)]]><link ref="GUI.HorizontalSlider">GUI.HorizontalSlider</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(25, 20, 200, 30), (float)instanceCount, 1.0f, 5000000.0f);
    }]]><br /><br /><![CDATA[    void UpdateBuffers() {
        // Ensure submesh index is in range
        if (instanceMesh != null)
            subMeshIndex = ]]><link ref="Mathf.Clamp">Mathf.Clamp</link><![CDATA[(subMeshIndex, 0, instanceMesh.subMeshCount - 1);]]><br /><br /><![CDATA[        // Positions
        if (positionBuffer != null)
            positionBuffer.Release();
        positionBuffer = new ]]><link ref="ComputeBuffer">ComputeBuffer</link><![CDATA[(instanceCount, 16);
        ]]><link ref="Vector4">Vector4</link><![CDATA[[] positions = new ]]><link ref="Vector4">Vector4</link><![CDATA[[instanceCount];
        for (int i = 0; i < instanceCount; i++) {
            float angle = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(0.0f, ]]><link ref="Mathf.PI">Mathf.PI</link><![CDATA[ * 2.0f);
            float distance = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(20.0f, 100.0f);
            float height = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(-2.0f, 2.0f);
            float size = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(0.05f, 0.25f);
            positions[i] = new ]]><link ref="Vector4">Vector4</link><![CDATA[(]]><link ref="Mathf.Sin">Mathf.Sin</link><![CDATA[(angle) * distance, height, ]]><link ref="Mathf.Cos">Mathf.Cos</link><![CDATA[(angle) * distance, size);
        }
        positionBuffer.SetData(positions);
        instanceMaterial.SetBuffer("positionBuffer", positionBuffer);]]><br /><br /><![CDATA[        // Indirect args
        if (instanceMesh != null) {
            args[0] = (uint)instanceMesh.GetIndexCount(subMeshIndex);
            args[1] = (uint)instanceCount;
            args[2] = (uint)instanceMesh.GetIndexStart(subMeshIndex);
            args[3] = (uint)instanceMesh.GetBaseVertex(subMeshIndex);
        }
        else
        {
            args[0] = args[1] = args[2] = args[3] = 0;
        }
        argsBuffer.SetData(args);]]><br /><br /><![CDATA[        cachedInstanceCount = instanceCount;
        cachedSubMeshIndex = subMeshIndex;
    }]]><br /><br /><![CDATA[    void OnDisable() {
        if (positionBuffer != null)
            positionBuffer.Release();
        positionBuffer = null;]]><br /><br /><![CDATA[        if (argsBuffer != null)
            argsBuffer.Release();
        argsBuffer = null;
    }
}
]]></CSharp>
      </Example>
      <Description><![CDATA[下面是一个表面着色器，可以与上面的示例脚本配合使用：]]></Description>
      <Example nocheck="true" convertexample="false">
        <JavaScript>
          <link ref="Shader">Shader</link><![CDATA[ "Instanced/InstancedSurfaceShader" {
    Properties {
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
        _Glossiness ("Smoothness", ]]><link ref="SocialPlatforms.Range">Range</link><![CDATA[(0,1)) = 0.5
        _Metallic ("Metallic", ]]><link ref="SocialPlatforms.Range">Range</link><![CDATA[(0,1)) = 0.0
    }
    SubShader {
        Tags { "RenderType"="Opaque" }
        ]]><link ref="LOD">LOD</link><![CDATA[ 200]]><br /><br /><![CDATA[        CGPROGRAM
        // Physically based Standard lighting model
        #pragma surface surf Standard addshadow fullforwardshadows
        #pragma multi_compile_instancing
        #pragma instancing_options procedural:setup]]><br /><br /><![CDATA[        sampler2D _MainTex;]]><br /><br /><![CDATA[        struct ]]><link ref="Input">Input</link><![CDATA[ {
            float2 uv_MainTex;
        };]]><br /><br /><![CDATA[    #ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED
        StructuredBuffer<float4> positionBuffer;
    #endif]]><br /><br /><![CDATA[        void rotate2D(inout float2 v, float r)
        {
            float s, c;
            sincos(r, s, c);
            v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
        }]]><br /><br /><![CDATA[        void setup()
        {
        #ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED
            float4 data = positionBuffer[unity_InstanceID];]]><br /><br /><![CDATA[            float rotation = data.w * data.w * _Time.y * 0.5f;
            rotate2D(data.xz, rotation);]]><br /><br /><![CDATA[            unity_ObjectToWorld._11_21_31_41 = float4(data.w, 0, 0, 0);
            unity_ObjectToWorld._12_22_32_42 = float4(0, data.w, 0, 0);
            unity_ObjectToWorld._13_23_33_43 = float4(0, 0, data.w, 0);
            unity_ObjectToWorld._14_24_34_44 = float4(data.xyz, 1);
            unity_WorldToObject = unity_ObjectToWorld;
            unity_WorldToObject._14_24_34 *= -1;
            unity_WorldToObject._11_22_33 = 1.0f / unity_WorldToObject._11_22_33;
        #endif
        }]]><br /><br /><![CDATA[        half _Glossiness;
        half _Metallic;]]><br /><br /><![CDATA[        void surf (]]><link ref="Input">Input</link><![CDATA[ IN, inout SurfaceOutputStandard o) {
            fixed4 c = tex2D (_MainTex, IN.uv_MainTex);
            o.Albedo = c.rgb;
            o.Metallic = _Metallic;
            o.Smoothness = _Glossiness;
            o.Alpha = c.a;
        }
        ENDCG
    }
    FallBack "Diffuse"
}
]]></JavaScript>
        <CSharp>
          <link ref="Shader">Shader</link><![CDATA[ "Instanced/InstancedSurfaceShader" {
    Properties {
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
        _Glossiness ("Smoothness", ]]><link ref="SocialPlatforms.Range">Range</link><![CDATA[(0,1)) = 0.5
        _Metallic ("Metallic", ]]><link ref="SocialPlatforms.Range">Range</link><![CDATA[(0,1)) = 0.0
    }
    SubShader {
        Tags { "RenderType"="Opaque" }
        ]]><link ref="LOD">LOD</link><![CDATA[ 200]]><br /><br /><![CDATA[        CGPROGRAM
        // Physically based Standard lighting model
        #pragma surface surf Standard addshadow fullforwardshadows
        #pragma multi_compile_instancing
        #pragma instancing_options procedural:setup]]><br /><br /><![CDATA[        sampler2D _MainTex;]]><br /><br /><![CDATA[        struct ]]><link ref="Input">Input</link><![CDATA[ {
            float2 uv_MainTex;
        };]]><br /><br /><![CDATA[    #ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED
        StructuredBuffer<float4> positionBuffer;
    #endif]]><br /><br /><![CDATA[        void rotate2D(inout float2 v, float r)
        {
            float s, c;
            sincos(r, s, c);
            v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
        }]]><br /><br /><![CDATA[        void setup()
        {
        #ifdef UNITY_PROCEDURAL_INSTANCING_ENABLED
            float4 data = positionBuffer[unity_InstanceID];]]><br /><br /><![CDATA[            float rotation = data.w * data.w * _Time.y * 0.5f;
            rotate2D(data.xz, rotation);]]><br /><br /><![CDATA[            unity_ObjectToWorld._11_21_31_41 = float4(data.w, 0, 0, 0);
            unity_ObjectToWorld._12_22_32_42 = float4(0, data.w, 0, 0);
            unity_ObjectToWorld._13_23_33_43 = float4(0, 0, data.w, 0);
            unity_ObjectToWorld._14_24_34_44 = float4(data.xyz, 1);
            unity_WorldToObject = unity_ObjectToWorld;
            unity_WorldToObject._14_24_34 *= -1;
            unity_WorldToObject._11_22_33 = 1.0f / unity_WorldToObject._11_22_33;
        #endif
        }]]><br /><br /><![CDATA[        half _Glossiness;
        half _Metallic;]]><br /><br /><![CDATA[        void surf (]]><link ref="Input">Input</link><![CDATA[ IN, inout SurfaceOutputStandard o) {
            fixed4 c = tex2D (_MainTex, IN.uv_MainTex);
            o.Albedo = c.rgb;
            o.Metallic = _Metallic;
            o.Smoothness = _Glossiness;
            o.Alpha = c.a;
        }
        ENDCG
    }
    FallBack "Diffuse"
}
]]></CSharp>
      </Example>
      <Description><![CDATA[下面是一个自定义着色器，可以与上面的示例脚本配合使用：]]></Description>
      <Example nocheck="true" convertexample="false">
        <JavaScript>
          <link ref="Shader">Shader</link><![CDATA[ "Instanced/InstancedShader" {
    Properties {
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
    }
    SubShader {]]><br /><br /><![CDATA[        ]]><link ref="ShaderData.Pass">Pass</link><![CDATA[ {]]><br /><br /><![CDATA[            Tags {"]]><link ref="Experimental.GlobalIllumination.LightMode">LightMode</link><![CDATA["="ForwardBase"}]]><br /><br /><![CDATA[            CGPROGRAM]]><br /><br /><![CDATA[            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight
            #pragma target 4.5]]><br /><br /><![CDATA[            #include "UnityCG.cginc"
            #include "UnityLightingCommon.cginc"
            #include "AutoLight.cginc"]]><br /><br /><![CDATA[            sampler2D _MainTex;]]><br /><br /><![CDATA[        #if SHADER_TARGET >= 45
            StructuredBuffer<float4> positionBuffer;
        #endif]]><br /><br /><![CDATA[            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv_MainTex : TEXCOORD0;
                float3 ambient : TEXCOORD1;
                float3 diffuse : TEXCOORD2;
                float3 color : TEXCOORD3;
                SHADOW_COORDS(4)
            };]]><br /><br /><![CDATA[            void rotate2D(inout float2 v, float r)
            {
                float s, c;
                sincos(r, s, c);
                v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
            }]]><br /><br /><![CDATA[            v2f vert (appdata_full v, uint instanceID : SV_InstanceID)
            {
            #if SHADER_TARGET >= 45
                float4 data = positionBuffer[instanceID];
            #else
                float4 data = 0;
            #endif]]><br /><br /><![CDATA[                float rotation = data.w * data.w * _Time.y * 0.5f;
                rotate2D(data.xz, rotation);]]><br /><br /><![CDATA[                float3 localPosition = v.vertex.xyz * data.w;
                float3 worldPosition = data.xyz + localPosition;
                float3 worldNormal = v.normal;]]><br /><br /><br /><br /><![CDATA[                float3 ndotl = saturate(dot(worldNormal, _WorldSpaceLightPos0.xyz));
                float3 ambient = ShadeSH9(float4(worldNormal, 1.0f));
                float3 diffuse = (ndotl * _LightColor0.rgb);
                float3 color = v.color;]]><br /><br /><![CDATA[                v2f o;
                o.pos = mul(UNITY_MATRIX_VP, float4(worldPosition, 1.0f));
                o.uv_MainTex = v.texcoord;
                o.ambient = ambient;
                o.diffuse = diffuse;
                o.color = color;
                TRANSFER_SHADOW(o)
                return o;
            }]]><br /><br /><![CDATA[            fixed4 frag (v2f i) : SV_Target
            {
                fixed shadow = SHADOW_ATTENUATION(i);
                fixed4 albedo = tex2D(_MainTex, i.uv_MainTex);
                float3 lighting = i.diffuse * shadow + i.ambient;
                fixed4 output = fixed4(albedo.rgb * i.color * lighting, albedo.w);
                UNITY_APPLY_FOG(i.fogCoord, output);
                return output;
            }]]><br /><br /><![CDATA[            ENDCG
        }
    }
}
]]></JavaScript>
        <CSharp>
          <link ref="Shader">Shader</link><![CDATA[ "Instanced/InstancedShader" {
    Properties {
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
    }
    SubShader {]]><br /><br /><![CDATA[        ]]><link ref="ShaderData.Pass">Pass</link><![CDATA[ {]]><br /><br /><![CDATA[            Tags {"]]><link ref="Experimental.GlobalIllumination.LightMode">LightMode</link><![CDATA["="ForwardBase"}]]><br /><br /><![CDATA[            CGPROGRAM]]><br /><br /><![CDATA[            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight
            #pragma target 4.5]]><br /><br /><![CDATA[            #include "UnityCG.cginc"
            #include "UnityLightingCommon.cginc"
            #include "AutoLight.cginc"]]><br /><br /><![CDATA[            sampler2D _MainTex;]]><br /><br /><![CDATA[        #if SHADER_TARGET >= 45
            StructuredBuffer<float4> positionBuffer;
        #endif]]><br /><br /><![CDATA[            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv_MainTex : TEXCOORD0;
                float3 ambient : TEXCOORD1;
                float3 diffuse : TEXCOORD2;
                float3 color : TEXCOORD3;
                SHADOW_COORDS(4)
            };]]><br /><br /><![CDATA[            void rotate2D(inout float2 v, float r)
            {
                float s, c;
                sincos(r, s, c);
                v = float2(v.x * c - v.y * s, v.x * s + v.y * c);
            }]]><br /><br /><![CDATA[            v2f vert (appdata_full v, uint instanceID : SV_InstanceID)
            {
            #if SHADER_TARGET >= 45
                float4 data = positionBuffer[instanceID];
            #else
                float4 data = 0;
            #endif]]><br /><br /><![CDATA[                float rotation = data.w * data.w * _Time.x * 0.5f;
                rotate2D(data.xz, rotation);]]><br /><br /><![CDATA[                float3 localPosition = v.vertex.xyz * data.w;
                float3 worldPosition = data.xyz + localPosition;
                float3 worldNormal = v.normal;]]><br /><br /><br /><br /><![CDATA[                float3 ndotl = saturate(dot(worldNormal, _WorldSpaceLightPos0.xyz));
                float3 ambient = ShadeSH9(float4(worldNormal, 1.0f));
                float3 diffuse = (ndotl * _LightColor0.rgb);
                float3 color = v.color;]]><br /><br /><![CDATA[                v2f o;
                o.pos = mul(UNITY_MATRIX_VP, float4(worldPosition, 1.0f));
                o.uv_MainTex = v.texcoord;
                o.ambient = ambient;
                o.diffuse = diffuse;
                o.color = color;
                TRANSFER_SHADOW(o)
                return o;
            }]]><br /><br /><![CDATA[            fixed4 frag (v2f i) : SV_Target
            {
                fixed shadow = SHADOW_ATTENUATION(i);
                fixed4 albedo = tex2D(_MainTex, i.uv_MainTex);
                float3 lighting = i.diffuse * shadow + i.ambient;
                fixed4 output = fixed4(albedo.rgb * i.color * lighting, albedo.w);
                UNITY_APPLY_FOG(i.fogCoord, output);
                return output;
            }]]><br /><br /><![CDATA[            ENDCG
        }
    }
}
]]></CSharp>
      </Example>
    </Section>
  </Model>
</Root>
