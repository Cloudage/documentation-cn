<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model Namespace="UnityEditor">
    <StaticVars />
    <Vars>
      <member id="PropertyDrawer-attribute">
        <name>attribute</name>
        <summary><![CDATA[此属性的 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[。不适用于自定义类绘制器。（只读）]]></summary>
      </member>
      <member id="PropertyDrawer-fieldInfo">
        <name>fieldInfo</name>
        <summary><![CDATA[此属性所表示的成员的反射 FieldInfo。（只读）]]></summary>
      </member>
    </Vars>
    <ProtVars />
    <StaticProtVars />
    <Constructors />
    <MemberFunctions>
      <member id="PropertyDrawer.CanCacheInspectorGUI">
        <name>CanCacheInspectorGUI</name>
        <summary><![CDATA[重载此方法可确定您的属性的检视面板 GUI 是否可以缓存。]]></summary>
      </member>
      <member id="PropertyDrawer.GetPropertyHeight">
        <name>GetPropertyHeight</name>
        <summary><![CDATA[重载此方法可指定此字段的 GUI 的高度（以像素为单位）。]]></summary>
      </member>
      <member id="PropertyDrawer.OnGUI">
        <name>OnGUI</name>
        <summary><![CDATA[重写此方法，以针对该属性创建您自己的 GUI。]]></summary>
      </member>
    </MemberFunctions>
    <ProtectedFunctions />
    <StaticFunctions />
    <Operators />
    <Messages />
    <Events />
    <Delegates />
    <Section>
      <Signature>
        <Declaration name="PropertyDrawer" type="class" namespace="UnityEditor" modifiers="public" Obsolete="" />
        <ReturnType />
      </Signature>
      <Summary><![CDATA[用于从中派生自定义属性绘制器的基类。使用此基类可为您自己的 ]]><link ref="Serializable">Serializable</link><![CDATA[ 类或者具有自定义 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[ 的脚本变量创建自定义绘制器。]]></Summary>
      <Description><![CDATA[PropertyDrawer 有两种用途：]]><br /><![CDATA[
- 自定义 ]]><link ref="Serializable">Serializable</link><![CDATA[ 类的每个实例的 GUI。]]><br /><![CDATA[
- 自定义具有自定义 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[ 的脚本成员的 GUI。]]><br /><br /><![CDATA[如果您有自定义的 ]]><link ref="Serializable">Serializable</link><![CDATA[ 类，可以使用 PropertyDrawer 来控制它在 Inspector 中的外观。
请参考以下脚本示例中的 Serializable 类 Ingredient：]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[
using System;
using UnityEngine;]]><br /><br /><![CDATA[public enum IngredientUnit { Spoon, Cup, Bowl, Piece }]]><br /><br /><![CDATA[// Custom serializable class
[]]><link ref="Serializable">Serializable</link><![CDATA[]
public class Ingredient
{
    public string name;
    public int amount = 1;
    public IngredientUnit unit;
}]]><br /><br /><![CDATA[public class Recipe : ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[
{
    public Ingredient potionResult;
    public Ingredient[] potionIngredients;
}
]]></CSharp>
      </Example>
      <Description><![CDATA[使用 PropertyDrawer 可以更改每个 Ingredient 类在 Inspector 中的外观。
比较不带和带有自定义 PropertyDrawer 的 Inspector 中 Ingredient 属性的外观：]]><br /><br /><image>CustomPropertyDrawer_Class.png</image><br /><![CDATA[
]]><i>Class in the Inspector without (left) and with (right) custom PropertyDrawer.</i><br /><br /><![CDATA[您可以使用 ]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[ 特性将 PropertyDrawer 附加到 Serializable 类，然后传入绘制器所对应的 Serializable 类的类型。]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[
#pragma strict
// IngredientDrawer
@]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[(Ingredient)
public class IngredientDrawer extends ]]><link ref="PropertyDrawer">PropertyDrawer</link><![CDATA[ {
    // Draw the property inside the given rect
    public override function OnGUI(position: ]]><link ref="Rect">Rect</link><![CDATA[, property: ]]><link ref="SerializedProperty">SerializedProperty</link><![CDATA[, label: ]]><link ref="GUIContent">GUIContent</link><![CDATA[) {
        // prefab override logic works on the entire property.
        ]]><link ref="EditorGUI.BeginProperty">EditorGUI.BeginProperty</link><![CDATA[(position, label, property);
        // Draw label
        position = ]]><link ref="EditorGUI.PrefixLabel">EditorGUI.PrefixLabel</link><![CDATA[(position, ]]><link ref="GUIUtility.GetControlID">GUIUtility.GetControlID</link><![CDATA[(]]><link ref="FocusType.Passive">FocusType.Passive</link><![CDATA[), label);
        // Don't make child fields be indented
        var indent = ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[;
        ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[ = 0;
        // Calculate rects
        var amountRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x, position.y, 30, position.height);
        var unitRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x + 35, position.y, 50, position.height);
        var nameRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x + 90, position.y, position.width - 90, position.height);
        // Draw fields - passs ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[ to each so they are drawn without labels
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(amountRect, property.FindPropertyRelative("amount"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(unitRect, property.FindPropertyRelative("unit"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(nameRect, property.FindPropertyRelative("name"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);
        // Set indent back to what it was
        ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[ = indent;
        ]]><link ref="EditorGUI.EndProperty">EditorGUI.EndProperty</link><![CDATA[();
    }
}
]]></JavaScript>
        <CSharp><![CDATA[
using ]]><link ref="UnityEditor">UnityEditor</link><![CDATA[;
using UnityEngine;]]><br /><br /><![CDATA[// IngredientDrawer
[]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[(typeof(Ingredient))]
public class IngredientDrawer : ]]><link ref="PropertyDrawer">PropertyDrawer</link><![CDATA[
{
    // Draw the property inside the given rect
    public override void OnGUI(]]><link ref="Rect">Rect</link><![CDATA[ position, ]]><link ref="SerializedProperty">SerializedProperty</link><![CDATA[ property, ]]><link ref="GUIContent">GUIContent</link><![CDATA[ label)
    {
        // Using BeginProperty / EndProperty on the parent property means that
        // prefab override logic works on the entire property.
        ]]><link ref="EditorGUI.BeginProperty">EditorGUI.BeginProperty</link><![CDATA[(position, label, property);]]><br /><br /><![CDATA[        // Draw label
        position = ]]><link ref="EditorGUI.PrefixLabel">EditorGUI.PrefixLabel</link><![CDATA[(position, ]]><link ref="GUIUtility.GetControlID">GUIUtility.GetControlID</link><![CDATA[(]]><link ref="FocusType.Passive">FocusType.Passive</link><![CDATA[), label);]]><br /><br /><![CDATA[        // Don't make child fields be indented
        var indent = ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[;
        ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[ = 0;]]><br /><br /><![CDATA[        // Calculate rects
        var amountRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x, position.y, 30, position.height);
        var unitRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x + 35, position.y, 50, position.height);
        var nameRect = new ]]><link ref="Rect">Rect</link><![CDATA[(position.x + 90, position.y, position.width - 90, position.height);]]><br /><br /><![CDATA[        // Draw fields - passs ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[ to each so they are drawn without labels
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(amountRect, property.FindPropertyRelative("amount"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(unitRect, property.FindPropertyRelative("unit"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);
        ]]><link ref="EditorGUI.PropertyField">EditorGUI.PropertyField</link><![CDATA[(nameRect, property.FindPropertyRelative("name"), ]]><link ref="GUIContent-none">GUIContent.none</link><![CDATA[);]]><br /><br /><![CDATA[        // Set indent back to what it was
        ]]><link ref="EditorGUI-indentLevel">EditorGUI.indentLevel</link><![CDATA[ = indent;]]><br /><br /><![CDATA[        ]]><link ref="EditorGUI.EndProperty">EditorGUI.EndProperty</link><![CDATA[();
    }
}
]]></CSharp>
      </Example>
      <Description><![CDATA[PropertyDrawer 的另一用途是改变脚本中具有自定义 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[ 的成员的外观。
假如您要将脚本中的浮点数或整数限制在特定范围内，并在 Inspector 中将其显示为滑动条。
那么，您可以使用内置的 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[（名为 ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[）来执行此操作：]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[
using UnityEngine;
using System.Collections;]]><br /><br /><![CDATA[public class ExampleClass : ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[
{
    // Show this float in the Inspector as a slider between 0 and 10
    []]><link ref="SocialPlatforms.Range">Range</link><![CDATA[(0.0F, 10.0F)]
    public float myFloat = 0.0F;
}
]]></CSharp>
      </Example>
      <Description><![CDATA[您还可以创建自己的 ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[。我们将以 ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[ 的代码为例。
该特性必须扩展 PropertyAttribute 类。如果需要，属性可以使用参数并将它们存储为公共成员变量。]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[
// This is not an editor script. The property attribute class should be placed in a regular script file.
using UnityEngine;]]><br /><br /><![CDATA[public class ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[ : ]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[
{
    public float min;
    public float max;]]><br /><br /><![CDATA[    public ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[(float min, float max)
    {
        this.min = min;
        this.max = max;
    }
}
]]></CSharp>
      </Example>
      <Description><![CDATA[拥有该特性后，您需要创建一个 PropertyDrawer 来绘制具有该特性的属性。
绘制器必须扩展 PropertyDrawer 类，且必须具有 ]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[ 特性来说明绘制器所对应的特性。]]></Description>
      <Example nocheck="false" convertexample="true">
        <JavaScript><![CDATA[no example available in JavaScript]]></JavaScript>
        <CSharp><![CDATA[
// The property drawer class should be placed in an editor script, inside a folder called ]]><link ref="Editor">Editor</link><![CDATA[.]]><br /><br /><![CDATA[// Tell the RangeDrawer that it is a drawer for properties with the ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[.
using UnityEngine;
using ]]><link ref="UnityEditor">UnityEditor</link><![CDATA[;]]><br /><br /><![CDATA[[]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[(typeof(]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[))]
public class RangeDrawer : ]]><link ref="PropertyDrawer">PropertyDrawer</link><![CDATA[
{
    // Draw the property inside the given rect
    public override void OnGUI(]]><link ref="Rect">Rect</link><![CDATA[ position, ]]><link ref="SerializedProperty">SerializedProperty</link><![CDATA[ property, ]]><link ref="GUIContent">GUIContent</link><![CDATA[ label)
    {
        // First get the attribute since it contains the range for the slider
        ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[ range = attribute as ]]><link ref="RangeAttribute">RangeAttribute</link><![CDATA[;]]><br /><br /><![CDATA[        // Now draw the property as a Slider or an IntSlider based on whether it's a float or integer.
        if (property.propertyType == ]]><link ref="SerializedPropertyType.Float">SerializedPropertyType.Float</link><![CDATA[)
            ]]><link ref="EditorGUI.Slider">EditorGUI.Slider</link><![CDATA[(position, property, range.min, range.max, label);
        else if (property.propertyType == ]]><link ref="SerializedPropertyType.Integer">SerializedPropertyType.Integer</link><![CDATA[)
            ]]><link ref="EditorGUI.IntSlider">EditorGUI.IntSlider</link><![CDATA[(position, property, Convert.ToInt32(range.min), Convert.ToInt32(range.max), label);
        else
            ]]><link ref="EditorGUI.LabelField">EditorGUI.LabelField</link><![CDATA[(position, label.text, "Use ]]><link ref="SocialPlatforms.Range">Range</link><![CDATA[ with float or int.");
    }
}
]]></CSharp>
      </Example>
      <Description><![CDATA[请注意，出于性能原因，EditorGUILayout 函数不能用于 PropertyDrawer。]]><br /><br /><![CDATA[另请参阅：]]><link ref="PropertyAttribute">PropertyAttribute</link><![CDATA[ 类、]]><link ref="CustomPropertyDrawer">CustomPropertyDrawer</link><![CDATA[ 类。]]></Description>
    </Section>
    <BaseType id="GUIDrawer">
      <StaticVars />
      <Vars />
      <ProtVars />
      <StaticProtVars />
      <Constructors />
      <MemberFunctions />
      <ProtectedFunctions />
      <StaticFunctions />
      <Operators />
      <Messages />
      <Events />
      <Delegates />
    </BaseType>
    <InheritsFrom>PropertyDrawer</InheritsFrom>
  </Model>
</Root>
