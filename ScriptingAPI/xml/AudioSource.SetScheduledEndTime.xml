<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model isComponent="true">
    <ParentClass>AudioSource</ParentClass>
    <Section>
      <Signature>
        <Declaration name="SetScheduledEndTime" type="function" modifiers="public" Obsolete="" />
        <ParamElement name="time" type="double" />
        <ReturnType>void</ReturnType>
      </Signature>
      <Summary><![CDATA[更改某个已计划播放的声音将结束的时间。注意，根据时间安排，并非所有重新计划的请求都能得到满足。]]></Summary>
      <ParamWithDoc>
        <name>time</name>
        <doc><![CDATA[时间（以秒为单位）。]]></doc>
      </ParamWithDoc>
      <Description><![CDATA[注意，指定的时间仍然为绝对时间轴上的时间，这意味着声音将在到达该时间时停止，与其开始时间无关。因此，如果您有一段长度为 5 秒的声音并且希望它在时间 T 播放、在 3 秒后停止（即声音的最后 2 秒静音），则需要将结束时间指定为 T+3。该函数在音乐系统中非常有用，它能够解决基于帧的有损编解码器导致的信号不连续问题。]]></Description>
      <Example nocheck="false" convertexample="false">
        <JavaScript><![CDATA[
// Demonstration of a tool that cuts up a clip into two clips with a short overlaps, then stitches them together at playback time.
// An overlap of 0.2 seconds is used meaning that the clip will be cut onto two portions of approximately the same size,
// but with the first sound having 0.2s of the sound after the cut and the second clip starting with
// 0.2s of the sound before the cut.
// The idea is then to play cut1 from its start to the cut point and then stop playback, i.e. not playing
// the 0.2s overlap (this happens via the SetScheduledEndTime), then play cut2 starting 0.2s into the sound and
// playing it to the end.
// While this may seem unnecessarily complicated to do this in the case of uncompressed sounds, you can now use
// the SavWav code from https://gist.github.com/2317063 to save the generated clips into new assets,
// run the program once with a specified sourceClip and the script will generate "cut1.wav" and "cut2.wav".
// These can now be imported into Unity as assets and changed to compressed sounds.
// Since psychoacoustic compression severely alters the waveforms and frequency content of sounds and
// furthermore operates in a block-based fashion, it would cause very noticeable pops and clicks if we didn't
// have the sound data after and before the cut point. By having it, even though we are not playing it, the decoder is "warmed up",
// i.e. it has matching frequency content before and after the transition, so at least the
// frequency spectrum will be more or less the same before and after the transition and so the click will be less audible
// than if we had just cut up the sound without the 0.2s overlap regions.
// This method may also be combined with cross-fading in order to further smoothen out any remaining artifacts.]]><br /><br /><![CDATA[@script ]]><link ref="RequireComponent">RequireComponent</link><![CDATA[(]]><link ref="AudioSource">AudioSource</link><![CDATA[)]]><br /><br /><![CDATA[public var sourceClip : ]]><link ref="AudioClip">AudioClip</link><![CDATA[;]]><br /><br /><![CDATA[private var audio1 : ]]><link ref="AudioSource">AudioSource</link><![CDATA[;
private var audio2 : ]]><link ref="AudioSource">AudioSource</link><![CDATA[;
private var cutClip1 : ]]><link ref="AudioClip">AudioClip</link><![CDATA[;
private var cutClip2 : ]]><link ref="AudioClip">AudioClip</link><![CDATA[;
private var overlap : float = 0.2f;
private var len1 : int = 0;
private var len2 : int = 0;]]><br /><br /><![CDATA[function Start ()
{
    var child : ]]><link ref="GameObject">GameObject</link><![CDATA[;
    child = new ]]><link ref="GameObject">GameObject</link><![CDATA[("Player1"); child.transform.parent = gameObject.transform; audio1 = child.AddComponent.<]]><link ref="AudioSource">AudioSource</link><![CDATA[>();
    child = new ]]><link ref="GameObject">GameObject</link><![CDATA[("Player2"); child.transform.parent = gameObject.transform; audio2 = child.AddComponent.<]]><link ref="AudioSource">AudioSource</link><![CDATA[>();
    var overlapSamples : int;
    if(sourceClip != null)
    {
        len1 = sourceClip.samples / 2;
        len2 = sourceClip.samples - len1;
        overlapSamples = overlap * sourceClip.frequency;
        cutClip1 = ]]><link ref="AudioClip.Create">AudioClip.Create</link><![CDATA[ ("cut1", len1 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
        cutClip2 = ]]><link ref="AudioClip.Create">AudioClip.Create</link><![CDATA[ ("cut2", len2 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
        var smp1 = new float [(len1 + overlapSamples) * sourceClip.channels];
        var smp2 = new float [(len2 + overlapSamples) * sourceClip.channels];
        sourceClip.GetData(smp1, 0);
        sourceClip.GetData(smp2, len1 - overlapSamples);
        cutClip1.SetData(smp1, 0);
        cutClip2.SetData(smp2, 0);
        //SavWav.Save("cut1.wav", cutClip1);
        //SavWav.Save("cut2.wav", cutClip2);
    }
    else
    {
        overlapSamples = overlap * cutClip1.frequency;
        len1 = cutClip1.samples - overlapSamples;
        len2 = cutClip2.samples - overlapSamples;
    }
}]]><br /><br /><![CDATA[function OnGUI()
{
    if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 50, 230, 40), "Trigger source"))
        audio1.PlayOneShot(sourceClip);
    if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 100, 230, 40), "Trigger cut 1"))
        audio1.PlayOneShot(cutClip1);
    if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 150, 230, 40), "Trigger cut 2"))
        audio1.PlayOneShot(cutClip2);
    if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 200, 230, 40), "Play stitched"))
    {
        audio1.clip = cutClip1;
        audio2.clip = cutClip2;
        var t0 = ]]><link ref="AudioSettings-dspTime">AudioSettings.dspTime</link><![CDATA[ + 3.0;
        var clipTime1 : double = len1;
        clipTime1 /= cutClip1.frequency;
        audio1.PlayScheduled(t0);
        audio1.SetScheduledEndTime(t0 + clipTime1);
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("t0 = " + t0 + ", clipTime1 = " + clipTime1 + ", cutClip1.frequency = " + cutClip1.frequency);
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("cutClip2.frequency = " + cutClip2.frequency + ", samplerate = " + ]]><link ref="AudioSettings-outputSampleRate">AudioSettings.outputSampleRate</link><![CDATA[);
        audio2.PlayScheduled(t0 + clipTime1);
        audio2.time = overlap;
    }
}
]]></JavaScript>
        <CSharp><![CDATA[
using UnityEngine;
using System.Collections;]]><br /><br /><![CDATA[// While this may seem unnecessarily complicated to do this in the case of uncompressed sounds, you can now use
// the SavWav code from https://gist.github.com/2317063 to save the generated clips into new assets,
// run the program once with a specified sourceClip and the script will generate "cut1.wav" and "cut2.wav".
// These can now be imported into Unity as assets and changed to compressed sounds.
// Since psychoacoustic compression severely alters the waveforms and frequency content of sounds and
// furthermore operates in a block-based fashion, it would cause very noticeable pops and clicks if we didn't
// have the sound data after and before the cut point. By having it, even though we are not playing it, the decoder is "warmed up",
// i.e. it has matching frequency content before and after the transition, so at least the
// frequency spectrum will be more or less the same before and after the transition and so the click will be less audible
// than if we had just cut up the sound without the 0.2s overlap regions.
// This method may also be combined with cross-fading in order to further smoothen out any remaining artifacts.
[]]><link ref="RequireComponent">RequireComponent</link><![CDATA[(typeof(]]><link ref="AudioSource">AudioSource</link><![CDATA[))]
public class ExampleClass : ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[
{
    public ]]><link ref="AudioClip">AudioClip</link><![CDATA[ sourceClip;
    private ]]><link ref="AudioSource">AudioSource</link><![CDATA[ audio1;
    private ]]><link ref="AudioSource">AudioSource</link><![CDATA[ audio2;
    private ]]><link ref="AudioClip">AudioClip</link><![CDATA[ cutClip1;
    private ]]><link ref="AudioClip">AudioClip</link><![CDATA[ cutClip2;
    private float overlap = 0.2F;
    private int len1 = 0;
    private int len2 = 0;
    void Start()
    {
        ]]><link ref="GameObject">GameObject</link><![CDATA[ child;
        child = new ]]><link ref="GameObject">GameObject</link><![CDATA[("Player1");
        child.transform.parent = gameObject.transform;
        audio1 = child.AddComponent<]]><link ref="AudioSource">AudioSource</link><![CDATA[>();
        child = new ]]><link ref="GameObject">GameObject</link><![CDATA[("Player2");
        child.transform.parent = gameObject.transform;
        audio2 = child.AddComponent<]]><link ref="AudioSource">AudioSource</link><![CDATA[>();
        int overlapSamples;
        if (sourceClip != null)
        {
            len1 = sourceClip.samples / 2;
            len2 = sourceClip.samples - len1;
            overlapSamples = (int)(overlap * sourceClip.frequency);
            cutClip1 = ]]><link ref="AudioClip.Create">AudioClip.Create</link><![CDATA[("cut1", len1 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
            cutClip2 = ]]><link ref="AudioClip.Create">AudioClip.Create</link><![CDATA[("cut2", len2 + overlapSamples, sourceClip.channels, sourceClip.frequency, false, false);
            float[] smp1 = new float[(len1 + overlapSamples) * sourceClip.channels];
            float[] smp2 = new float[(len2 + overlapSamples) * sourceClip.channels];
            sourceClip.GetData(smp1, 0);
            sourceClip.GetData(smp2, len1 - overlapSamples);
            cutClip1.SetData(smp1, 0);
            cutClip2.SetData(smp2, 0);
        }
        else
        {
            overlapSamples = (int)overlap * cutClip1.frequency;
            len1 = cutClip1.samples - overlapSamples;
            len2 = cutClip2.samples - overlapSamples;
        }
    }]]><br /><br /><![CDATA[    void OnGUI()
    {
        if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 50, 230, 40), "Trigger source"))
            audio1.PlayOneShot(sourceClip);]]><br /><br /><![CDATA[        if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 100, 230, 40), "Trigger cut 1"))
            audio1.PlayOneShot(cutClip1);]]><br /><br /><![CDATA[        if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 150, 230, 40), "Trigger cut 2"))
            audio1.PlayOneShot(cutClip2);]]><br /><br /><![CDATA[        if (]]><link ref="GUI.Button">GUI.Button</link><![CDATA[(new ]]><link ref="Rect">Rect</link><![CDATA[(10, 200, 230, 40), "Play stitched"))
        {
            audio1.clip = cutClip1;
            audio2.clip = cutClip2;
            double t0 = ]]><link ref="AudioSettings-dspTime">AudioSettings.dspTime</link><![CDATA[ + 3.0F;
            double clipTime1 = len1;
            clipTime1 /= cutClip1.frequency;
            audio1.PlayScheduled(t0);
            audio1.SetScheduledEndTime(t0 + clipTime1);
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("t0 = " + t0 + ", clipTime1 = " + clipTime1 + ", cutClip1.frequency = " + cutClip1.frequency);
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("cutClip2.frequency = " + cutClip2.frequency + ", samplerate = " + ]]><link ref="AudioSettings-outputSampleRate">AudioSettings.outputSampleRate</link><![CDATA[);
            audio2.PlayScheduled(t0 + clipTime1);
            audio2.time = overlap;
        }
    }
}
]]></CSharp>
      </Example>
      <Description>
        <b>注意：</b><![CDATA[如有可能，请创建包含重叠部分的剪辑，然后对第一个剪辑使用计划的结束时间，对第二个使用 ]]><link ref="AudioSource-time">AudioSource.time</link><![CDATA[，以截掉重叠部分，如上例中所示。]]></Description>
    </Section>
  </Model>
</Root>
