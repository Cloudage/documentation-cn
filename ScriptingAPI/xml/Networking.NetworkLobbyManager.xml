<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model isComponent="true" Namespace="UnityEngine.Networking">
    <StaticVars />
    <Vars>
      <member id="Networking.NetworkLobbyManager-gamePlayerPrefab">
        <name>gamePlayerPrefab</name>
        <summary><![CDATA[这是要在 PlayScene 中创建的玩家的预制件。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-lobbyPlayerPrefab">
        <name>lobbyPlayerPrefab</name>
        <summary><![CDATA[这是要在 LobbyScene 中创建的玩家的预制件。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-lobbyScene">
        <name>lobbyScene</name>
        <summary><![CDATA[要用于大厅的场景。这类似于 NetworkManager 的 offlineScene。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-lobbySlots">
        <name>lobbySlots</name>
        <summary><![CDATA[这些字段可跟踪进入大厅的玩家。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-maxPlayers">
        <name>maxPlayers</name>
        <summary><![CDATA[游戏中允许的最大玩家数量。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-maxPlayersPerConnection">
        <name>maxPlayersPerConnection</name>
        <summary><![CDATA[每个连接中的最大玩家数量。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-minPlayers">
        <name>minPlayers</name>
        <summary><![CDATA[要使游戏准备好开始所需的最少玩家数量。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-playScene">
        <name>playScene</name>
        <summary><![CDATA[要用于从大厅试玩游戏的场景。这类似于 NetworkManager 的 onlineScene。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager-showLobbyGUI">
        <name>showLobbyGUI</name>
        <summary><![CDATA[此标志支持显示默认大厅 UI。]]></summary>
      </member>
    </Vars>
    <ProtVars />
    <StaticProtVars />
    <Constructors />
    <MemberFunctions>
      <member id="Networking.NetworkLobbyManager.CheckReadyToBegin">
        <name>CheckReadyToBegin</name>
        <summary><![CDATA[CheckReadyToBegin 用于检查大厅中的所有玩家，查看其 readyToBegin 标志是否已设置。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed">
        <name>OnLobbyClientAddPlayerFailed</name>
        <summary><![CDATA[在客户端将玩家添加到大厅的操作失败后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientConnect">
        <name>OnLobbyClientConnect</name>
        <summary><![CDATA[在客户端连接到服务器后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientDisconnect">
        <name>OnLobbyClientDisconnect</name>
        <summary><![CDATA[在客户端与服务器断开连接后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientEnter">
        <name>OnLobbyClientEnter</name>
        <summary><![CDATA[这是一个钩子，允许在游戏客户端进入大厅时执行自定义行为。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientExit">
        <name>OnLobbyClientExit</name>
        <summary><![CDATA[这是一个钩子，允许在游戏客户端退出大厅时执行自定义行为。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyClientSceneChanged">
        <name>OnLobbyClientSceneChanged</name>
        <summary><![CDATA[在客户端完成新联网场景的加载后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerConnect">
        <name>OnLobbyServerConnect</name>
        <summary><![CDATA[在新客户端连接到服务器后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer">
        <name>OnLobbyServerCreateGamePlayer</name>
        <summary><![CDATA[这允许自定义在服务器上创建 GamePlayer 对象的过程。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer">
        <name>OnLobbyServerCreateLobbyPlayer</name>
        <summary><![CDATA[这允许自定义在服务器上创建大厅玩家对象的过程。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerDisconnect">
        <name>OnLobbyServerDisconnect</name>
        <summary><![CDATA[在客户端断开连接后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved">
        <name>OnLobbyServerPlayerRemoved</name>
        <summary><![CDATA[在玩家删除后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerPlayersReady">
        <name>OnLobbyServerPlayersReady</name>
        <summary><![CDATA[在大厅内的所有玩家均准备就绪后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerSceneChanged">
        <name>OnLobbyServerSceneChanged</name>
        <summary><![CDATA[在联网场景完成加载后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer">
        <name>OnLobbyServerSceneLoadedForPlayer</name>
        <summary><![CDATA[在服务器获知客户端已完成从大厅场景到游戏玩家场景的切换后在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyStartClient">
        <name>OnLobbyStartClient</name>
        <summary><![CDATA[在客户端启动后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyStartHost">
        <name>OnLobbyStartHost</name>
        <summary><![CDATA[在主机启动后在主机上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyStartServer">
        <name>OnLobbyStartServer</name>
        <summary><![CDATA[在服务器启动后（包括主机启动后）在服务器上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyStopClient">
        <name>OnLobbyStopClient</name>
        <summary><![CDATA[在客户端停止后在客户端上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.OnLobbyStopHost">
        <name>OnLobbyStopHost</name>
        <summary><![CDATA[在主机停止后在主机上调用此方法。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.SendReturnToLobby">
        <name>SendReturnToLobby</name>
        <summary><![CDATA[向服务器发送消息以使游戏返回到大厅场景。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.ServerReturnToLobby">
        <name>ServerReturnToLobby</name>
        <summary><![CDATA[调用此方法会导致服务器切换回大厅场景。]]></summary>
      </member>
      <member id="Networking.NetworkLobbyManager.TryToAddPlayer">
        <name>TryToAddPlayer</name>
        <summary><![CDATA[这在客户端上使用，用于尝试将玩家添加到游戏中。]]></summary>
      </member>
    </MemberFunctions>
    <ProtectedFunctions />
    <StaticFunctions />
    <Operators />
    <Messages />
    <Events />
    <Delegates />
    <Section>
      <Signature>
        <Declaration name="NetworkLobbyManager" type="class" namespace="UnityEngine.Networking" modifiers="public" Obsolete="" />
        <ReturnType />
      </Signature>
      <Summary><![CDATA[这是一个专用 NetworkManager，其中包括一个联网大厅。]]></Summary>
      <Description><![CDATA[该大厅设有用于跟踪已加入玩家的字段，以及会强制执行的最大玩家数量限制。它要求在大厅玩家对象上使用 NetworkLobbyPlayer 组件。]]><br /><br /><![CDATA[NetworkLobbyManager 派生自 NetworkManager，因此它实现了 NetworkManager 类提供的许多虚拟函数。为避免意外替换 NetworkLobbyManager 的功能，NetworkLobbyManager 上提供了以“OnLobby”开头的新虚拟函数。这些虚拟函数应在派生自 NetworkLobbyManager 的类（而不是 NetworkManager）上使用。]]><br /><br /><![CDATA[OnLobby*() 函数在 NetworkLobbyManager 基类上存在空实现，因此不必调用基类函数。]]></Description>
    </Section>
    <BaseType id="Networking.NetworkManager">
      <StaticVars>
        <member id="Networking.NetworkManager-networkSceneName">
          <name>networkSceneName</name>
          <summary><![CDATA[当前网络场景的名称。]]></summary>
        </member>
        <member id="Networking.NetworkManager-singleton">
          <name>singleton</name>
          <summary><![CDATA[NetworkManager 单例对象。]]></summary>
        </member>
      </StaticVars>
      <Vars>
        <member id="Behaviour-enabled">
          <name>enabled</name>
          <summary><![CDATA[启用的 Behaviour 可更新，禁用的 Behaviour 不可更新。]]></summary>
        </member>
        <member id="Behaviour-isActiveAndEnabled">
          <name>isActiveAndEnabled</name>
          <summary><![CDATA[已调用启用的 Behaviour。]]></summary>
        </member>
        <member id="Component-gameObject">
          <name>gameObject</name>
          <summary><![CDATA[此组件附加到的游戏对象。始终将组件附加到游戏对象。]]></summary>
        </member>
        <member id="Component-tag">
          <name>tag</name>
          <summary><![CDATA[此游戏对象的标签。]]></summary>
        </member>
        <member id="Component-transform">
          <name>transform</name>
          <summary><![CDATA[附加到此 ]]><link ref="GameObject">GameObject</link><![CDATA[ 的 ]]><link ref="Transform">Transform</link><![CDATA[。]]></summary>
        </member>
        <member id="MonoBehaviour-runInEditMode">
          <name>runInEditMode</name>
          <summary><![CDATA[允许 MonoBehaviour 的特定实例在编辑模式下运行（仅可在 Editor 中使用）。]]></summary>
        </member>
        <member id="MonoBehaviour-useGUILayout">
          <name>useGUILayout</name>
          <summary><![CDATA[禁用该属性可跳过 GUI 布局阶段。]]></summary>
        </member>
        <member id="Networking.NetworkManager-autoCreatePlayer">
          <name>autoCreatePlayer</name>
          <summary><![CDATA[用于控制是否在连接时以及场景更改时自动创建玩家对象的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-channels">
          <name>channels</name>
          <summary><![CDATA[要用于网络传输层的服务质量通道。]]></summary>
        </member>
        <member id="Networking.NetworkManager-client">
          <name>client</name>
          <summary><![CDATA[管理器当前正在使用的 NetworkClient。]]></summary>
        </member>
        <member id="Networking.NetworkManager-clientLoadedScene">
          <name>clientLoadedScene</name>
          <summary><![CDATA[如果客户端在连接到服务器时加载了新场景，则为 true。]]></summary>
        </member>
        <member id="Networking.NetworkManager-connectionConfig">
          <name>connectionConfig</name>
          <summary><![CDATA[要使用的自定义网络配置。]]></summary>
        </member>
        <member id="Networking.NetworkManager-customConfig">
          <name>customConfig</name>
          <summary><![CDATA[用于启用自定义网络配置的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-dontDestroyOnLoad">
          <name>dontDestroyOnLoad</name>
          <summary><![CDATA[用于控制是否在场景更改时销毁 NetworkManager 对象的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-globalConfig">
          <name>globalConfig</name>
          <summary><![CDATA[要使用的传输层全局配置。]]></summary>
        </member>
        <member id="Networking.NetworkManager-isNetworkActive">
          <name>isNetworkActive</name>
          <summary><![CDATA[如果 NetworkServer 或 NetworkClient 处于活动状态，则为 true。]]></summary>
        </member>
        <member id="Networking.NetworkManager-logLevel">
          <name>logLevel</name>
          <summary><![CDATA[专门面向用户的日志级别，适用于网络日志消息。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matches">
          <name>matches</name>
          <summary><![CDATA[可加入的匹配列表。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchHost">
          <name>matchHost</name>
          <summary><![CDATA[配对服务器的主机名。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchInfo">
          <name>matchInfo</name>
          <summary><![CDATA[调用 StartServer() 或 StartClient() 时将使用的 MatchInfo 实例。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchMaker">
          <name>matchMaker</name>
          <summary><![CDATA[UMatch MatchMaker 对象。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchName">
          <name>matchName</name>
          <summary><![CDATA[当前匹配的名称。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchPort">
          <name>matchPort</name>
          <summary><![CDATA[配对服务的端口。]]></summary>
        </member>
        <member id="Networking.NetworkManager-matchSize">
          <name>matchSize</name>
          <summary><![CDATA[当前匹配中的最大玩家数量。]]></summary>
        </member>
        <member id="Networking.NetworkManager-maxConnections">
          <name>maxConnections</name>
          <summary><![CDATA[要支持的最大并发网络连接数量。]]></summary>
        </member>
        <member id="Networking.NetworkManager-maxDelay">
          <name>maxDelay</name>
          <summary><![CDATA[在连接上发送数据包之前的最大延时。]]></summary>
        </member>
        <member id="Networking.NetworkManager-migrationManager">
          <name>migrationManager</name>
          <summary><![CDATA[正在与 NetworkManager 配合使用的迁移管理器。]]></summary>
        </member>
        <member id="Networking.NetworkManager-networkAddress">
          <name>networkAddress</name>
          <summary><![CDATA[当前使用的网络地址。]]></summary>
        </member>
        <member id="Networking.NetworkManager-networkPort">
          <name>networkPort</name>
          <summary><![CDATA[当前使用的网络端口。]]></summary>
        </member>
        <member id="Networking.NetworkManager-numPlayers">
          <name>numPlayers</name>
          <summary><![CDATA[NumPlayers 是服务器上所有连接中处于活动状态的玩家对象的数量。]]></summary>
        </member>
        <member id="Networking.NetworkManager-offlineScene">
          <name>offlineScene</name>
          <summary><![CDATA[离线时要切换到的场景。]]></summary>
        </member>
        <member id="Networking.NetworkManager-onlineScene">
          <name>onlineScene</name>
          <summary><![CDATA[在线时要切换到的场景。]]></summary>
        </member>
        <member id="Networking.NetworkManager-packetLossPercentage">
          <name>packetLossPercentage</name>
          <summary><![CDATA[为客户端丢弃的传入和传出数据包所占的百分比。]]></summary>
        </member>
        <member id="Networking.NetworkManager-playerPrefab">
          <name>playerPrefab</name>
          <summary><![CDATA[用于在服务器上创建玩家对象的默认预制件。]]></summary>
        </member>
        <member id="Networking.NetworkManager-playerSpawnMethod">
          <name>playerSpawnMethod</name>
          <summary><![CDATA[生成 NetworkManager 所使用玩家的当前方法。]]></summary>
        </member>
        <member id="Networking.NetworkManager-runInBackground">
          <name>runInBackground</name>
          <summary><![CDATA[控制程序是否在后台运行。]]></summary>
        </member>
        <member id="Networking.NetworkManager-scriptCRCCheck">
          <name>scriptCRCCheck</name>
          <summary><![CDATA[用于在服务器和客户端之间使用脚本 CRC 检查的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-secureTunnelEndpoint">
          <name>secureTunnelEndpoint</name>
          <summary><![CDATA[允许您指定 EndPoint 对象，而不是设置 networkAddress 和 networkPort（Xbox One 等部分平台需要）。]]></summary>
        </member>
        <member id="Networking.NetworkManager-serverBindAddress">
          <name>serverBindAddress</name>
          <summary><![CDATA[与服务器绑定的 IP 地址。]]></summary>
        </member>
        <member id="Networking.NetworkManager-serverBindToIP">
          <name>serverBindToIP</name>
          <summary><![CDATA[用于告知服务器是否绑定到特定 IP 地址的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-simulatedLatency">
          <name>simulatedLatency</name>
          <summary><![CDATA[要添加到客户端传入和传出数据包的延时（以毫秒为单位）。]]></summary>
        </member>
        <member id="Networking.NetworkManager-spawnPrefabs">
          <name>spawnPrefabs</name>
          <summary><![CDATA[将使用生成系统注册的预制件列表。]]></summary>
        </member>
        <member id="Networking.NetworkManager-startPositions">
          <name>startPositions</name>
          <summary><![CDATA[当前场景的当前已注册玩家起始位置列表。]]></summary>
        </member>
        <member id="Networking.NetworkManager-useSimulator">
          <name>useSimulator</name>
          <summary><![CDATA[用于控制此 NetworkManager 启动的客户端是否使用模拟延迟和丢包的标志。]]></summary>
        </member>
        <member id="Networking.NetworkManager-useWebSockets">
          <name>useWebSockets</name>
          <summary><![CDATA[此属性可让 NetworkServer 监听 WebSockets 连接，而不是正常的传输层连接。]]></summary>
        </member>
        <member id="Object-hideFlags">
          <name>hideFlags</name>
          <summary><![CDATA[该对象应该隐藏、随场景一起保存还是由用户修改？]]></summary>
        </member>
        <member id="Object-name">
          <name>name</name>
          <summary><![CDATA[对象的名称。]]></summary>
        </member>
      </Vars>
      <ProtVars />
      <StaticProtVars />
      <Constructors />
      <MemberFunctions>
        <member id="Component.BroadcastMessage">
          <name>BroadcastMessage</name>
          <summary><![CDATA[调用此游戏对象或其任何子项中的每个 ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[ 上名为 ]]><varname>methodName</varname><![CDATA[ 的方法。]]></summary>
        </member>
        <member id="Component.CompareTag">
          <name>CompareTag</name>
          <summary><![CDATA[此游戏对象是否使用 ]]><varname>tag</varname><![CDATA[ 进行了标记？]]></summary>
        </member>
        <member id="Component.GetComponent">
          <name>GetComponent</name>
          <summary><![CDATA[如果游戏对象附加了类型为 ]]><varname>type</varname><![CDATA[ 的组件，则将其返回，否则返回 null。]]></summary>
        </member>
        <member id="Component.GetComponentInChildren">
          <name>GetComponentInChildren</name>
          <summary><![CDATA[使用深度首次搜索返回 ]]><link ref="GameObject">GameObject</link><![CDATA[ 或其任何子项中类型为 ]]><varname>type</varname><![CDATA[ 的组件。]]></summary>
        </member>
        <member id="Component.GetComponentInParent">
          <name>GetComponentInParent</name>
          <summary><![CDATA[返回 ]]><link ref="GameObject">GameObject</link><![CDATA[ 或其任何父项中类型为 ]]><varname>type</varname><![CDATA[ 的组件。]]></summary>
        </member>
        <member id="Component.GetComponents">
          <name>GetComponents</name>
          <summary><![CDATA[返回 ]]><link ref="GameObject">GameObject</link><![CDATA[ 中类型为 ]]><varname>type</varname><![CDATA[ 的所有组件。]]></summary>
        </member>
        <member id="Component.GetComponentsInChildren">
          <name>GetComponentsInChildren</name>
          <summary><![CDATA[返回 ]]><link ref="GameObject">GameObject</link><![CDATA[ 或其任何子项中类型为 ]]><varname>type</varname><![CDATA[ 的所有组件。]]></summary>
        </member>
        <member id="Component.GetComponentsInParent">
          <name>GetComponentsInParent</name>
          <summary><![CDATA[返回 ]]><link ref="GameObject">GameObject</link><![CDATA[ 或其任何父项中类型为 ]]><varname>type</varname><![CDATA[ 的所有组件。]]></summary>
        </member>
        <member id="Component.SendMessage">
          <name>SendMessage</name>
          <summary><![CDATA[调用此游戏对象中的每个 ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[ 上名为 ]]><varname>methodName</varname><![CDATA[ 的方法。]]></summary>
        </member>
        <member id="Component.SendMessageUpwards">
          <name>SendMessageUpwards</name>
          <summary><![CDATA[调用此游戏对象中的每个 ]]><link ref="MonoBehaviour">MonoBehaviour</link><![CDATA[ 上或此行为的每个父级上名为 ]]><varname>methodName</varname><![CDATA[ 的方法。]]></summary>
        </member>
        <member id="MonoBehaviour.CancelInvoke">
          <name>CancelInvoke</name>
          <summary><![CDATA[取消该 MonoBehaviour 上的所有 Invoke 调用。]]></summary>
        </member>
        <member id="MonoBehaviour.Invoke">
          <name>Invoke</name>
          <summary><![CDATA[在 ]]><varname>time</varname><![CDATA[ 秒后调用 ]]><varname>methodName</varname><![CDATA[ 方法。]]></summary>
        </member>
        <member id="MonoBehaviour.InvokeRepeating">
          <name>InvokeRepeating</name>
          <summary><![CDATA[在 ]]><varname>time</varname><![CDATA[ 秒后调用 ]]><varname>methodName</varname><![CDATA[ 方法，然后每 ]]><varname>repeatRate</varname><![CDATA[ 秒调用一次。]]></summary>
        </member>
        <member id="MonoBehaviour.IsInvoking">
          <name>IsInvoking</name>
          <summary><![CDATA[是否有任何待处理的 ]]><varname>methodName</varname><![CDATA[ 调用？]]></summary>
        </member>
        <member id="MonoBehaviour.StartCoroutine">
          <name>StartCoroutine</name>
          <summary><![CDATA[启动一个协同程序。]]></summary>
        </member>
        <member id="MonoBehaviour.StopAllCoroutines">
          <name>StopAllCoroutines</name>
          <summary><![CDATA[停止在该行为上运行的所有协同程序。]]></summary>
        </member>
        <member id="MonoBehaviour.StopCoroutine">
          <name>StopCoroutine</name>
          <summary><![CDATA[停止在该行为上运行的第一个名为 ]]><varname>methodName</varname><![CDATA[ 的协同程序或存储在 ]]><varname>routine</varname><![CDATA[ 中的协同程序。]]></summary>
        </member>
        <member id="Networking.NetworkManager.GetStartPosition">
          <name>GetStartPosition</name>
          <summary><![CDATA[此方法可根据场景中的 NetworkStartPosition 对象找到生成位置。]]></summary>
        </member>
        <member id="Networking.NetworkManager.IsClientConnected">
          <name>IsClientConnected</name>
          <summary><![CDATA[此方法可检查 NetworkManager 是否有客户端连接到服务器。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnClientConnect">
          <name>OnClientConnect</name>
          <summary><![CDATA[连接到服务器时在客户端上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnClientDisconnect">
          <name>OnClientDisconnect</name>
          <summary><![CDATA[与服务器断开连接后在客户端上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnClientError">
          <name>OnClientError</name>
          <summary><![CDATA[发生网络错误时在客户端上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnClientNotReady">
          <name>OnClientNotReady</name>
          <summary><![CDATA[服务器告知客户端其不再准备就绪时在客户端上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnClientSceneChanged">
          <name>OnClientSceneChanged</name>
          <summary><![CDATA[服务器启动的场景加载完成时在客户端上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnDestroyMatch">
          <name>OnDestroyMatch</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.DestroyMatch">NetworkMatch.DestroyMatch</link><![CDATA[ 请求时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnDropConnection">
          <name>OnDropConnection</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.DropConnection">NetworkMatch.DropConnection</link><![CDATA[ 匹配请求时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnMatchCreate">
          <name>OnMatchCreate</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.CreateMatch">NetworkMatch.CreateMatch</link><![CDATA[ 请求时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnMatchJoined">
          <name>OnMatchJoined</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.JoinMatch">NetworkMatch.JoinMatch</link><![CDATA[ 请求时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnMatchList">
          <name>OnMatchList</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.ListMatches">NetworkMatch.ListMatches</link><![CDATA[ 请求时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerAddPlayer">
          <name>OnServerAddPlayer</name>
          <summary><![CDATA[在客户端使用 ClientScene.AddPlayer 添加新玩家时在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerConnect">
          <name>OnServerConnect</name>
          <summary><![CDATA[新客户端连接到服务器时在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerDisconnect">
          <name>OnServerDisconnect</name>
          <summary><![CDATA[在客户端与服务器断开连接时在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerError">
          <name>OnServerError</name>
          <summary><![CDATA[在客户端连接发生网络错误时在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerReady">
          <name>OnServerReady</name>
          <summary><![CDATA[在客户端准备就绪后在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerRemovePlayer">
          <name>OnServerRemovePlayer</name>
          <summary><![CDATA[在客户端删除玩家时在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnServerSceneChanged">
          <name>OnServerSceneChanged</name>
          <summary><![CDATA[当服务器使用 ServerChangeScene() 启动的场景加载完成时，在服务器上调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnSetMatchAttributes">
          <name>OnSetMatchAttributes</name>
          <summary><![CDATA[在服务器上处理 ]]><link ref="Networking.Match.NetworkMatch.SetMatchAttributes">NetworkMatch.SetMatchAttributes</link><![CDATA[ 时发生的回调。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStartClient">
          <name>OnStartClient</name>
          <summary><![CDATA[此钩子会在客户端启动时调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStartHost">
          <name>OnStartHost</name>
          <summary><![CDATA[此钩子会在主机启动时调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStartServer">
          <name>OnStartServer</name>
          <summary><![CDATA[此钩子会在服务器启动时（包括主机启动时）调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStopClient">
          <name>OnStopClient</name>
          <summary><![CDATA[此钩子会在客户端停止时调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStopHost">
          <name>OnStopHost</name>
          <summary><![CDATA[此钩子会在主机停止时调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.OnStopServer">
          <name>OnStopServer</name>
          <summary><![CDATA[此钩子会在服务器停止时（包括主机停止时）调用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.ServerChangeScene">
          <name>ServerChangeScene</name>
          <summary><![CDATA[此方法会导致服务器切换场景并设置 networkSceneName。]]></summary>
        </member>
        <member id="Networking.NetworkManager.SetMatchHost">
          <name>SetMatchHost</name>
          <summary><![CDATA[此方法可设置 MatchMaker 服务的地址。]]></summary>
        </member>
        <member id="Networking.NetworkManager.SetupMigrationManager">
          <name>SetupMigrationManager</name>
          <summary><![CDATA[此方法可设置 NetworkMigrationManager 对象，从而与此 NetworkManager 配合使用。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StartClient">
          <name>StartClient</name>
          <summary><![CDATA[此方法会启动网络客户端。它使用 networkAddress 和 networkPort 属性作为要连接到的地址。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StartHost">
          <name>StartHost</name>
          <summary><![CDATA[此方法会启动网络“主机”- 位于同一应用程序中的服务器和客户端。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StartMatchMaker">
          <name>StartMatchMaker</name>
          <summary><![CDATA[此方法会为 NetworkManager 启动 MatchMaker。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StartServer">
          <name>StartServer</name>
          <summary><![CDATA[此方法会启动一个新服务器。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StopClient">
          <name>StopClient</name>
          <summary><![CDATA[停止管理器正在使用的客户端。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StopHost">
          <name>StopHost</name>
          <summary><![CDATA[此方法会同时停止管理器正在使用的客户端和服务器。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StopMatchMaker">
          <name>StopMatchMaker</name>
          <summary><![CDATA[停止 NetworkManager 正在使用的 MatchMaker。]]></summary>
        </member>
        <member id="Networking.NetworkManager.StopServer">
          <name>StopServer</name>
          <summary><![CDATA[停止管理器正在使用的服务器。]]></summary>
        </member>
        <member id="Networking.NetworkManager.UseExternalClient">
          <name>UseExternalClient</name>
          <summary><![CDATA[这样一来，NetworkManager 可以使用在 NetworkManager 外部创建的客户端对象，而不是使用 StartClient()。]]></summary>
        </member>
        <member id="Object.GetInstanceID">
          <name>GetInstanceID</name>
          <summary><![CDATA[返回对象的实例 ID。]]></summary>
        </member>
        <member id="Object.ToString">
          <name>ToString</name>
          <summary><![CDATA[返回 GameObject 的名称。]]></summary>
        </member>
      </MemberFunctions>
      <ProtectedFunctions />
      <StaticFunctions>
        <member id="MonoBehaviour-print">
          <name>print</name>
          <summary><![CDATA[将消息记录到 Unity 控制台（与 ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[ 相同）。]]></summary>
        </member>
        <member id="Networking.NetworkManager.RegisterStartPosition">
          <name>RegisterStartPosition</name>
          <summary><![CDATA[将游戏对象的变换组件注册为玩家生成位置。]]></summary>
        </member>
        <member id="Networking.NetworkManager.Shutdown">
          <name>Shutdown</name>
          <summary><![CDATA[完全关闭 NetworkManager 并销毁单例。]]></summary>
        </member>
        <member id="Networking.NetworkManager.UnRegisterStartPosition">
          <name>UnRegisterStartPosition</name>
          <summary><![CDATA[取消将游戏对象的变换组件注册为玩家生成位置。]]></summary>
        </member>
        <member id="Object.Destroy">
          <name>Destroy</name>
          <summary><![CDATA[删除 GameObject、组件或资源。]]></summary>
        </member>
        <member id="Object.DestroyImmediate">
          <name>DestroyImmediate</name>
          <summary><![CDATA[立即销毁对象 /obj/。强烈建议您改用 Destroy。]]></summary>
        </member>
        <member id="Object.DontDestroyOnLoad">
          <name>DontDestroyOnLoad</name>
          <summary><![CDATA[加载新场景时，不自动销毁对象 /target/。]]></summary>
        </member>
        <member id="Object.FindObjectOfType">
          <name>FindObjectOfType</name>
          <summary><![CDATA[返回第一个类型为 ]]><varname>type</varname><![CDATA[ 的已加载的激活对象。]]></summary>
        </member>
        <member id="Object.FindObjectsOfType">
          <name>FindObjectsOfType</name>
          <summary><![CDATA[返回所有类型为 ]]><varname>type</varname><![CDATA[ 的已加载的激活对象的列表。]]></summary>
        </member>
        <member id="Object.Instantiate">
          <name>Instantiate</name>
          <summary><![CDATA[克隆 ]]><varname>original</varname><![CDATA[ 对象并返回克隆对象。]]></summary>
        </member>
      </StaticFunctions>
      <Operators>
        <member id="Object-operator_Object">
          <name>bool</name>
          <summary><![CDATA[该对象是否存在？]]></summary>
        </member>
        <member id="Object-operator_ne">
          <name>operator !=</name>
          <summary><![CDATA[比较两个对象是否引用不同的对象。]]></summary>
        </member>
        <member id="Object-operator_eq">
          <name>operator ==</name>
          <summary><![CDATA[比较两个对象引用，判断它们是否引用同一个对象。]]></summary>
        </member>
      </Operators>
      <Messages>
        <member id="MonoBehaviour.Awake">
          <name>Awake</name>
          <summary><![CDATA[Awake 在加载脚本实例时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.FixedUpdate">
          <name>FixedUpdate</name>
          <summary><![CDATA[如果启用了 MonoBehaviour，则每个固定帧率帧调用该函数。]]></summary>
        </member>
        <member id="MonoBehaviour.LateUpdate">
          <name>LateUpdate</name>
          <summary><![CDATA[如果启用了 ]]><link ref="Behaviour">Behaviour</link><![CDATA[，则每帧调用 LateUpdate。]]></summary>
        </member>
        <member id="MonoBehaviour.OnAnimatorIK">
          <name>OnAnimatorIK</name>
          <summary><![CDATA[用于设置动画 IK（反向运动学）的回调。]]></summary>
        </member>
        <member id="MonoBehaviour.OnAnimatorMove">
          <name>OnAnimatorMove</name>
          <summary><![CDATA[用于处理动画移动以修改根运动的回调。]]></summary>
        </member>
        <member id="MonoBehaviour.OnApplicationFocus">
          <name>OnApplicationFocus</name>
          <summary><![CDATA[当玩家获得或失去焦点时，发送给所有 GameObject。]]></summary>
        </member>
        <member id="MonoBehaviour.OnApplicationPause">
          <name>OnApplicationPause</name>
          <summary><![CDATA[当应用程序暂停时，发送给所有 GameObject。]]></summary>
        </member>
        <member id="MonoBehaviour.OnApplicationQuit">
          <name>OnApplicationQuit</name>
          <summary><![CDATA[在应用程序退出前，发送给所有游戏对象。]]></summary>
        </member>
        <member id="MonoBehaviour.OnAudioFilterRead">
          <name>OnAudioFilterRead</name>
          <summary><![CDATA[如果实现了 OnAudioFilterRead，Unity 将在音频 DSP 链中插入一个自定义滤波器。]]></summary>
        </member>
        <member id="MonoBehaviour.OnBecameInvisible">
          <name>OnBecameInvisible</name>
          <summary><![CDATA[OnBecameInvisible 在渲染器对任何摄像机都不可见时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnBecameVisible">
          <name>OnBecameVisible</name>
          <summary><![CDATA[OnBecameVisible 在渲染器变为对任意摄像机可见时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionEnter">
          <name>OnCollisionEnter</name>
          <summary><![CDATA[当该碰撞体/刚体已开始接触另一个刚体/碰撞体时，调用 OnCollisionEnter。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionEnter2D">
          <name>OnCollisionEnter2D</name>
          <summary><![CDATA[当传入碰撞体与该对象的碰撞体接触时发送（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionExit">
          <name>OnCollisionExit</name>
          <summary><![CDATA[当该碰撞体/刚体已停止接触另一个刚体/碰撞体时，调用 OnCollisionExit。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionExit2D">
          <name>OnCollisionExit2D</name>
          <summary><![CDATA[当另一个对象上的碰撞体停止接触该对象的碰撞体时发送（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionStay">
          <name>OnCollisionStay</name>
          <summary><![CDATA[对应正在接触刚体/碰撞体的每一个碰撞体/刚体，每帧调用一次 :ref::OnCollisionStay。]]></summary>
        </member>
        <member id="MonoBehaviour.OnCollisionStay2D">
          <name>OnCollisionStay2D</name>
          <summary><![CDATA[在另一个对象上的碰撞体正在接触该对象的碰撞体时发送每个帧（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnConnectedToServer">
          <name>OnConnectedToServer</name>
          <summary><![CDATA[成功连接到服务器后在客户端上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnControllerColliderHit">
          <name>OnControllerColliderHit</name>
          <summary><![CDATA[当该控制器在执行 Move 时撞到碰撞体时调用 OnControllerColliderHit。]]></summary>
        </member>
        <member id="MonoBehaviour.OnDestroy">
          <name>OnDestroy</name>
          <summary><![CDATA[销毁附加的行为将导致游戏或场景收到 ]]><link ref="Networking.NetworkLobbyManager.OnDestroy">OnDestroy</link><![CDATA[。]]></summary>
        </member>
        <member id="MonoBehaviour.OnDisable">
          <name>OnDisable</name>
          <summary><![CDATA[该函数在行为被禁用时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnDisconnectedFromServer">
          <name>OnDisconnectedFromServer</name>
          <summary><![CDATA[当连接丢失或与服务器断开连接时，在客户端上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnDrawGizmos">
          <name>OnDrawGizmos</name>
          <summary><![CDATA[如果您想绘制能够选择并且始终绘制的辅助图标，则可以实现 OnDrawGizmos。]]></summary>
        </member>
        <member id="MonoBehaviour.OnDrawGizmosSelected">
          <name>OnDrawGizmosSelected</name>
          <summary><![CDATA[如果选择了对象，则实现 ]]><link ref="Networking.NetworkLobbyManager.OnDrawGizmosSelected">OnDrawGizmosSelected</link><![CDATA[ 来绘制辅助图标。]]></summary>
        </member>
        <member id="MonoBehaviour.OnEnable">
          <name>OnEnable</name>
          <summary><![CDATA[该函数在对象变为启用和激活状态时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnFailedToConnect">
          <name>OnFailedToConnect</name>
          <summary><![CDATA[出于某种原因连接尝试失败时，在客户端上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnFailedToConnectToMasterServer">
          <name>OnFailedToConnectToMasterServer</name>
          <summary><![CDATA[在连接到 MasterServer 时发生问题的情况下，在客户端或服务器上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnGUI">
          <name>OnGUI</name>
          <summary><![CDATA[系统调用 OnGUI 来渲染和处理 GUI 事件。]]></summary>
        </member>
        <member id="MonoBehaviour.OnJointBreak">
          <name>OnJointBreak</name>
          <summary><![CDATA[在附加到相同游戏对象的关节断开时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnJointBreak2D">
          <name>OnJointBreak2D</name>
          <summary><![CDATA[在附加到相同游戏对象的 ]]><link ref="Joint2D">Joint2D</link><![CDATA[ 断开时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMasterServerEvent">
          <name>OnMasterServerEvent</name>
          <summary><![CDATA[在从 MasterServer 报告事件时，在客户端或服务器上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseDown">
          <name>OnMouseDown</name>
          <summary><![CDATA[当用户在 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 上按下鼠标按钮时，将调用 ]]><link ref="Networking.NetworkLobbyManager.OnMouseDown">OnMouseDown</link><![CDATA[。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseDrag">
          <name>OnMouseDrag</name>
          <summary><![CDATA[当用户单击 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 并仍然按住鼠标时，将调用 OnMouseDrag。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseEnter">
          <name>OnMouseEnter</name>
          <summary><![CDATA[当鼠标进入 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseExit">
          <name>OnMouseExit</name>
          <summary><![CDATA[当鼠标不再处于 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 上方时调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseOver">
          <name>OnMouseOver</name>
          <summary><![CDATA[当鼠标悬停在 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 上时，每帧调用一次。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseUp">
          <name>OnMouseUp</name>
          <summary><![CDATA[当用户松开鼠标按钮时，将调用 OnMouseUp。]]></summary>
        </member>
        <member id="MonoBehaviour.OnMouseUpAsButton">
          <name>OnMouseUpAsButton</name>
          <summary><![CDATA[松开鼠标时，仅当鼠标在按下时所在的 ]]><link ref="GUIElement">GUIElement</link><![CDATA[ 或 ]]><link ref="Collider">Collider</link><![CDATA[ 上时，才调用 OnMouseUpAsButton。]]></summary>
        </member>
        <member id="MonoBehaviour.OnNetworkInstantiate">
          <name>OnNetworkInstantiate</name>
          <summary><![CDATA[在已通过 Network.Instantiate 进行网络实例化的对象上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnParticleCollision">
          <name>OnParticleCollision</name>
          <summary><![CDATA[当粒子击中碰撞体时，将调用 OnParticleCollision。]]></summary>
        </member>
        <member id="MonoBehaviour.OnParticleTrigger">
          <name>OnParticleTrigger</name>
          <summary><![CDATA[当粒子系统中的任何粒子满足触发模块中的条件时，将调用 OnParticleTrigger。]]></summary>
        </member>
        <member id="MonoBehaviour.OnPlayerConnected">
          <name>OnPlayerConnected</name>
          <summary><![CDATA[每当有新玩家成功连接，就在服务器上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnPlayerDisconnected">
          <name>OnPlayerDisconnected</name>
          <summary><![CDATA[每当有玩家与服务器断开连接，就在服务器上调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnPostRender">
          <name>OnPostRender</name>
          <summary><![CDATA[在摄像机完成场景渲染后，将调用 OnPostRender。]]></summary>
        </member>
        <member id="MonoBehaviour.OnPreCull">
          <name>OnPreCull</name>
          <summary><![CDATA[OnPreCull 在摄像机剔除场景前调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnPreRender">
          <name>OnPreRender</name>
          <summary><![CDATA[OnPreRender 在摄像机开始渲染场景前调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnRenderImage">
          <name>OnRenderImage</name>
          <summary><![CDATA[OnRenderImage 在图像的所有渲染操作全部完成后调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnRenderObject">
          <name>OnRenderObject</name>
          <summary><![CDATA[OnRenderObject 在摄像机渲染场景后调用。]]></summary>
        </member>
        <member id="MonoBehaviour.OnSerializeNetworkView">
          <name>OnSerializeNetworkView</name>
          <summary><![CDATA[用于在网络视图监视的脚本中自定义变量同步。]]></summary>
        </member>
        <member id="MonoBehaviour.OnServerInitialized">
          <name>OnServerInitialized</name>
          <summary><![CDATA[每当调用 Network.InitializeServer 并且完成时，对该服务器调用该函数。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTransformChildrenChanged">
          <name>OnTransformChildrenChanged</name>
          <summary><![CDATA[当 GameObject 的变换的子项列表发生更改时，将调用该函数。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTransformParentChanged">
          <name>OnTransformParentChanged</name>
          <summary><![CDATA[当 GameObject 的变换的父属性发生更改时，将调用该函数。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerEnter">
          <name>OnTriggerEnter</name>
          <summary><![CDATA[当 ]]><link ref="Collider">Collider</link><![CDATA[ ]]><varname>other</varname><![CDATA[ 事件进入该触发器时调用 OnTriggerEnter。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerEnter2D">
          <name>OnTriggerEnter2D</name>
          <summary><![CDATA[当另一个对象进入附加到该对象的触发碰撞体时发送（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerExit">
          <name>OnTriggerExit</name>
          <summary><![CDATA[当 ]]><link ref="Collider">Collider</link><![CDATA[ ]]><varname>other</varname><![CDATA[ 已停止接触该触发器时调用 OnTriggerExit。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerExit2D">
          <name>OnTriggerExit2D</name>
          <summary><![CDATA[当另一个对象离开附加到该对象的触发碰撞体时发送（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerStay">
          <name>OnTriggerStay</name>
          <summary><![CDATA[对于接触触发器的每一个 ]]><link ref="Collider">Collider</link><![CDATA[ /other/，每次物理更新调用一次 OnTriggerStay。]]></summary>
        </member>
        <member id="MonoBehaviour.OnTriggerStay2D">
          <name>OnTriggerStay2D</name>
          <summary><![CDATA[在另一个对象位于附加到该对象的触发碰撞体之内时发送每个帧（仅限 2D 物理）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnValidate">
          <name>OnValidate</name>
          <summary><![CDATA[加载脚本后或 Inspector 中的值发生更改时，将调用该函数（只能在 Editor 中调用）。]]></summary>
        </member>
        <member id="MonoBehaviour.OnWillRenderObject">
          <name>OnWillRenderObject</name>
          <summary><![CDATA[如果对象可见并且不是 UI 元素，则为每个摄像机调用 OnWillRenderObject。]]></summary>
        </member>
        <member id="MonoBehaviour.Reset">
          <name>Reset</name>
          <summary><![CDATA[重置为默认值。]]></summary>
        </member>
        <member id="MonoBehaviour.Start">
          <name>Start</name>
          <summary><![CDATA[在首次调用任何 Update 方法之前启用脚本时，在帧上调用 Start。]]></summary>
        </member>
        <member id="MonoBehaviour.Update">
          <name>Update</name>
          <summary><![CDATA[如果启用了 MonoBehaviour，则每帧调用 Update。]]></summary>
        </member>
      </Messages>
      <Events />
      <Delegates />
    </BaseType>
    <InheritsFrom>Networking.NetworkLobbyManager</InheritsFrom>
  </Model>
</Root>
