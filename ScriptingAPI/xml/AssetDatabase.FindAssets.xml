<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Root LongForm="false">
  <vars>
    <docs_type>ScriptReference</docs_type>
    <lang>zh_CN</lang>
    <unity_version>2018.1</unity_version>
    <current_docs_url>https://docs.unity3d.com/zh_CN/2018.1/</current_docs_url>
    <docs_versions>
      <docs_version version="2019.1">2019.1</docs_version>
      <docs_version version="2018.3">2018.3</docs_version>
      <docs_version version="2018.2">2018.2</docs_version>
      <docs_version version="2018.1">2018.1</docs_version>
      <docs_version version="2017.4">2017.4</docs_version>
      <docs_version version="2017.3">2017.3</docs_version>
      <docs_version version="2017.2">2017.2</docs_version>
      <docs_version version="2017.1">2017.1</docs_version>
      <docs_version version="5.6">560</docs_version>
      <docs_version version="5.5">550</docs_version>
      <docs_version version="5.4">540</docs_version>
      <docs_version version="5.3">530</docs_version>
    </docs_versions>
    <langname>中文</langname>
    <unity_url>https://unity3d.com/</unity_url>
    <current_docs_version version="2018.1">2018.1</current_docs_version>
    <jquery_js_url>../StaticFiles/js/jquery.js</jquery_js_url>
    <jquery_sidebar_url>../StaticFiles/js/jquery.sidebar.min.js</jquery_sidebar_url>
    <custom_js_url>../StaticFiles/js/custom.js</custom_js_url>
    <core_js_url>../StaticFiles/js/core.js</core_js_url>
    <core_css_url>../StaticFiles/css/core.css</core_css_url>
    <custom_css_url>../StaticFiles/css/custom.css</custom_css_url>
    <toc_js_url>docdata/toc.js</toc_js_url>
    <index_js_url>docdata/index.js</index_js_url>
    <langs>
      <lang locale="en">English</lang>
      <lang locale="ja">日本語</lang>
      <lang locale="es">Español</lang>
      <lang locale="kr">한국어</lang>
    </langs>
    <translation>
      <unity_tech>Unity Technologies</unity_tech>
      <unity_url>https://unity3d.com/</unity_url>
      <manual>Manual</manual>
      <scripting_api>Scripting API</scripting_api>
      <learn>Learn</learn>
      <learn_url>https://unity3d.com/learn</learn_url>
      <tutorials>Tutorials</tutorials>
      <tutorials_url>https://unity3d.com/learn</tutorials_url>
      <knowledgebase>Knowledge Base</knowledgebase>
      <knowledgebase_url>https://support.unity3d.com/hc/en-us</knowledgebase_url>
      <live_training>Live Training</live_training>
      <premium_support>Premium Support</premium_support>
      <community>Community</community>
      <community_url>https://unity3d.com/community</community_url>
      <community_answers>Community Answers</community_answers>
      <community_answers_url>https://answers.unity3d.com</community_answers_url>
      <forums>Forums</forums>
      <forums_url>https://forum.unity3d.com</forums_url>
      <answers>Answers</answers>
      <feedback>Feedback</feedback>
      <issuetracker>Issue Tracker</issuetracker>
      <unity_manual>Unity Manual</unity_manual>
      <unity_dash_manual>Unity - Manual</unity_dash_manual>
      <full_table_of_contents>Full table of contents</full_table_of_contents>
      <copyright>Copyright © 2018 Unity Technologies</copyright>
      <unity>Unity</unity>
      <gallery>Gallery</gallery>
      <asset_store>Asset Store</asset_store>
      <assetstore_url>https://unity3d.com/asset-store</assetstore_url>
      <buy>Buy</buy>
      <buy_url>https://store.unity3d.com</buy_url>
      <download>Download</download>
      <download_url>https://unity3d.com/unity/download</download_url>
      <language>Language</language>
      <previous>Previous</previous>
      <next>Next</next>
      <switch_to_manual>Switch to Manual</switch_to_manual>
      <switch_to_scriptref>Switch to Scripting Reference</switch_to_scriptref>
      <docs_url>https://docs.unity3d.com</docs_url>
      <help_trans>Help translating this page</help_trans>
      <search_placeholder>Search manual...</search_placeholder>
      <search_scripting_placeholder>Search scripting...</search_scripting_placeholder>
      <script_language>Script language</script_language>
      <script_language_body>Select your preferred scripting language. All code snippets will be displayed in this language.</script_language_body>
      <history>History</history>
      <inherits_from>Inherits from:</inherits_from>
      <implements_interfaces>Implements interfaces:</implements_interfaces>
      <suggest_a_change>Suggest a change</suggest_a_change>
      <suggest_success>Success!</suggest_success>
      <suggest_success_body>Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable.</suggest_success_body>
      <suggest_clone>Close</suggest_clone>
      <suggest_failed>Sumbission failed</suggest_failed>
      <suggest_failed_body>For some reason your suggested change could not be submitted. Please &lt;a&gt;try again&lt;/a&gt; in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation.</suggest_failed_body>
      <suggest_name>Your name</suggest_name>
      <suggest_email>Your email</suggest_email>
      <suggest_body>Suggestion</suggest_body>
      <suggest_submit>Submit suggestion</suggest_submit>
      <suggest_cancel>Cancel</suggest_cancel>
      <parameters>Parameters</parameters>
      <returns>Returns</returns>
      <description>Description</description>
      <static_variables>Static Variables</static_variables>
      <variables>Variables</variables>
      <constructors>Constructors</constructors>
      <public_functions>Public Functions</public_functions>
      <protected_functions>Protected Functions</protected_functions>
      <static_functions>Static Functions</static_functions>
      <operators>Operators</operators>
      <messages>Messages</messages>
      <delegates>Delegates</delegates>
      <events>Events</events>
      <inherited_members>Inherited members</inherited_members>
      <intro>欢迎使用 Unity Scripting Reference（脚本引用）！</intro>
      <intro_body_1>文档的这部分包含 Unity 提供的脚本 API 的详细信息。要使用这些信息，您应该了解 Unity 中脚本编写的基本理论和实践。我们使用手册的&lt;a href="../Manual/ScriptingSection.html"&gt; Scripting（脚本）部分&lt;/a&gt;对此进行了解释。</intro_body_1>
      <intro_body_2>脚本引用文档是根据脚本可用的类建立的，同时会描述这些类的方法、属性以及任何与它们的用法相关的信息。</intro_body_2>
      <intro_body_3>这些页面配有大量的示例代码，您可以将这些示例代码用于任何目的，而无需说明源自 Unity。此外，您可以使用每个页面顶部的菜单以 &lt;b&gt;C#&lt;/b&gt; 或 &lt;b&gt;JavaScript&lt;/b&gt; 查看示例代码。请注意，无论使用哪种编程语言，API 都是相同的，所以编程语言的选择完全取决于您的喜好。</intro_body_3>
      <intro_body_4>API 按其所属的 namespace 进行分组，可以从左侧的侧栏中选择。对于大多数用户，&lt;b&gt;UnityEngine&lt;/b&gt; 部分将是主要的调用端口。</intro_body_4>
      <classes>Classes</classes>
      <enumerations>Enumerations</enumerations>
      <attributes>Attributes</attributes>
      <api_histroy>API History</api_histroy>
      <api_histroy_body>Overview of additions to (and removals from) Unity's scripting API in each version.</api_histroy_body>
      <api_histroy_name>Name</api_histroy_name>
      <api_histroy_type>Type</api_histroy_type>
      <api_histroy_namespace>Namespace</api_histroy_namespace>
      <api_histroy_status>Status</api_histroy_status>
      <api_histroy_version>Version</api_histroy_version>
      <api_histroy_added>added</api_histroy_added>
      <api_histroy_obsolete>obsolete</api_histroy_obsolete>
      <api_histroy_removed>removed</api_histroy_removed>
      <known_issues>
        <p>这里描述的内容与实际不符？它可能是<b>已知问题</b>。请在 Issue Tracker（<a href="https://issuetracker.unity3d.com">issuetracker.unity3d.com</a>）中查看。</p>
      </known_issues>
      <rate_content>这个页面中的信息对您有帮助吗？请为它打分：</rate_content>
      <rate_thanks>Thanks for rating this page!</rate_thanks>
      <report_problem>报告此页面中的问题</report_problem>
      <problem_type>What kind of problem would you like to report?</problem_type>
      <problem_needcode>This page needs code samples</problem_needcode>
      <problem_code>Code samples do not work</problem_code>
      <problem_missing>Information is missing</problem_missing>
      <problem_incorrect>Information is incorrect</problem_incorrect>
      <problem_unclear>Information is unclear or confusing</problem_unclear>
      <problem_language>There is a spelling/grammar error on this page</problem_language>
      <problem_other>Something else</problem_other>
      <problem_thanks>Thanks for letting us know! This page has been marked for review based on your feedback.</problem_thanks>
      <problem_more_info>If you have time, you can provide more information to help us fix the problem faster.</problem_more_info>
      <problem_more_info_link>Provide more information</problem_more_info_link>
      <problem_needcode_form_description>You've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:</problem_needcode_form_description>
      <problem_code_form_description>You've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:</problem_code_form_description>
      <problem_missing_form_description>You've told us there is information missing from this page. Please tell us more about what's missing:</problem_missing_form_description>
      <problem_incorrect_form_description>You've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:</problem_incorrect_form_description>
      <problem_unclear_form_description>You've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:</problem_unclear_form_description>
      <problem_language_form_description>You've told us there is a spelling or grammar error on this page. Please tell us what's wrong:</problem_language_form_description>
      <problem_other_form_description>You've told us this page has a problem. Please tell us more about what's wrong:</problem_other_form_description>
      <problem_more_info_thanks>Thanks for helping to make the Unity documentation better!</problem_more_info_thanks>
      <leave_feedback>Leave feedback</leave_feedback>
    </translation>
  </vars>
  <Model>
    <ParentClass>AssetDatabase</ParentClass>
    <Section>
      <Signature>
        <Declaration name="FindAssets" type="function" modifiers="public static" Obsolete="" />
        <ParamElement name="filter" type="string" />
        <ReturnType>string[]</ReturnType>
      </Signature>
      <Signature>
        <Declaration name="FindAssets" type="function" modifiers="public static" Obsolete="" />
        <ParamElement name="filter" type="string" />
        <ParamElement name="searchInFolders" type="string[]" />
        <ReturnType>string[]</ReturnType>
      </Signature>
      <Summary><![CDATA[使用搜索筛选器字符串搜索资源数据库。]]></Summary>
      <ParamWithDoc>
        <name>filter</name>
        <doc><![CDATA[筛选器字符串可包含搜索数据。请参阅下文了解有关该字符串的
         详细信息。]]></doc>
      </ParamWithDoc>
      <ParamWithDoc>
        <name>searchInFolders</name>
        <doc><![CDATA[要从中开始搜索的文件夹。]]></doc>
      </ParamWithDoc>
      <ReturnWithDoc type="string[]">
        <doc><![CDATA[匹配资源的数组。请注意将返回 GUID。]]></doc>
      </ReturnWithDoc>
      <Description><![CDATA[FindAssets allows you to search for Assets.  The ]]><monotype>string</monotype><![CDATA[ argument can
        provide names, labels or types (classnames).  The filter string can include:]]><br /><![CDATA[
]]><br /><![CDATA[
]]><b>Name</b><![CDATA[: Filter assets by their filename (without extension). Words separated by whitespace
are treated as a separate name searches. So, for example ]]><monotype>"test asset"</monotype><![CDATA[, is a name of an Asset which will
be searched for.  Note that ]]><monotype>name:</monotype><![CDATA[ can be used to identify an asset.  Further, the name
used in the filter ]]><monotype>string</monotype><![CDATA[ can be specified as a subsection.  For example the ]]><monotype>test asset</monotype><![CDATA[ example
above can be matched using ]]><monotype>test</monotype><![CDATA[.]]><br /><![CDATA[
]]><br /><![CDATA[
]]><b>Labels</b><![CDATA[: Assets can have labels attached to them. Assets with particular labels can be
found use the keyword 'l:' before each label. This indicates that the string is
searching for labels.]]><br /><![CDATA[
]]><br /><![CDATA[
]]><b>Types</b><![CDATA[: Find assets based on explicitly identified types.  The keyword 't:' is used as a
way to specify that typed assets are being looked for.  If more than one type is included
in the filter ]]><monotype>string</monotype><![CDATA[ then assets that match one class will be returned.  Types can
either be builtin types such as ]]><monotype>Texture2D</monotype><![CDATA[ or user created script classes.  User created
classes are assets created from a ScriptableObject class in the project. If all assets are
wanted use ]]><monotype>Object</monotype><![CDATA[ as all assets derive from Object.  Specifying one or more folders
using the ]]><monotype>searchInFolders</monotype><![CDATA[ argument  will limit the searching to these folders and their
child folders. This is faster than searching all assets in all folders.]]><br /><![CDATA[
]]><br /><![CDATA[
]]><b>Note:</b><![CDATA[ Searching is case insensitive.]]><br /><![CDATA[
]]><br /><![CDATA[
Use ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[ to get asset paths and ]]><link ref="AssetDatabase.LoadAssetAtPath">AssetDatabase.LoadAssetAtPath</link><![CDATA[
to load an asset.]]></Description>
      <Example nocheck="false" convertexample="false">
        <JavaScript><![CDATA[
@]]><link ref="MenuItem">MenuItem</link><![CDATA[("Test/FindAssetsUsingSearchFilter")
static function FindAssetsUsingSearchFilter ()
{
    // Find all assets labelled with 'concrete' :
    var guids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[ ("l:concrete", null);
    for (var guid in guids)
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[ (]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));]]><br /><br /><![CDATA[    // Find all Texture2Ds that have 'co' in their filename, that are labelled with 'concrete' or 'architecture' and are placed in 'MyAwesomeProps' folder
    var guids2 = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[ ("co l:concrete l:architecture t:texture2D", ["Assets/MyAwesomeProps"]);
    for (var guid in guids2)
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[ (]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
}
]]></JavaScript>
        <CSharp><![CDATA[
using UnityEngine;
using ]]><link ref="UnityEditor">UnityEditor</link><![CDATA[;]]><br /><br /><![CDATA[public class Example
{
    []]><link ref="MenuItem">MenuItem</link><![CDATA[("Example/FindAssets Example")]
    static void ExampleScript()
    {
        // Find all assets labelled with 'architecture' :
        string[] guids1 = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("l:architecture", null);]]><br /><br /><![CDATA[        foreach (string guid1 in guids1)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[(]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid1));
        }]]><br /><br /><![CDATA[        // Find all Texture2Ds that have 'co' in their filename, that are labelled with 'architecture' and are placed in 'MyAwesomeProps' folder
        string[] guids2 = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("co l:architecture t:texture2D", new[] {"Assets/MyAwesomeProps"});]]><br /><br /><![CDATA[        foreach (string guid2 in guids2)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[(]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid2));
        }
    }
}
]]></CSharp>
      </Example>
      <Description><![CDATA[
          以下脚本示例显示了如何定位添加到资源的名称、
                标签和类型细节。演示了 ]]><link ref="AssetDatabase.FindAssets">FindAssets</link><![CDATA[ 函数。
                该示例中创建的资源使用的是 ]]><monotype>ScriptObj</monotype><![CDATA[ 类。
                该类的脚本示例如下所示。
        ]]></Description>
      <Example nocheck="false" convertexample="false">
        <JavaScript><![CDATA[
#pragma strict]]><br /><br /><![CDATA[public class Example {]]><br /><br /><![CDATA[    static var testI: ScriptObj;
    static var testJ: ScriptObj;
    static var testK: ScriptObj;]]><br /><br /><![CDATA[    @]]><link ref="MenuItem">MenuItem</link><![CDATA[("Example/FindAssets Example")
    static function ExampleScript() {
        CreateAssets();
        NamesExample();
        LabelsExample();
        TypesExample();
    }]]><br /><br /><![CDATA[    static function CreateAssets() {
        testI = ]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(ScriptObj) as ScriptObj;
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testI, "Assets/AssetFolder/testI.asset");
        testJ = ]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(ScriptObj) as ScriptObj;
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testJ, "Assets/AssetFolder/testJ.asset");
        // create an asset in a sub-folder and with a name which contains a space
        testK = ]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(ScriptObj) as ScriptObj;
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testK, "Assets/AssetFolder/SpecialFolder/testK example.asset");
        // an asset with a material will be used later
        var material: ]]><link ref="Material">Material</link><![CDATA[ = new ]]><link ref="Material">Material</link><![CDATA[(]]><link ref="Shader.Find">Shader.Find</link><![CDATA[("Standard"));
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(material, "Assets/AssetFolder/SpecialFolder/MyMaterial.mat");
    }]]><br /><br /><![CDATA[    static function NamesExample() {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY NAME ***");
        var results: String[];
        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testI");
        for (var guid: String in results) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testI: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testJ");
        for (var guid: String in results) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testJ: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testK example");
        for (var guid: String in results) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testK example: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** More complex asset search ***");
        // find all assets that contain test (which is all assets)
        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("test");
        for (var guid: String in results) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("name:test - " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }]]><br /><br /><![CDATA[    static function LabelsExample() {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY LABELS ***");
        var setLabels: String[];
        setLabels = ["wrapper"];
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testI, setLabels);
        setLabels = ["bottle", "banana", "carrot"];
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testJ, setLabels);
        setLabels = ["swappable", "helmet"];
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testK, setLabels);]]><br /><br /><![CDATA[        //   testJ has bottle, so have a label searched as 'bot'
        var getGuids: String[] = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("l:app l:bot");
        for (var guid: String in getGuids) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("label lookup: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }]]><br /><br /><![CDATA[    static function TypesExample() {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY TYPE ***");
        var guids: String[];]]><br /><br /><![CDATA[        // search for a ScriptObject called ScriptObj
        guids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("t:ScriptObj");
        for (var guid: String in guids) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("ScriptObj: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }]]><br /><br /><![CDATA[        guids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("t:ScriptObj l:helmet");
        for (var guid: String in guids) {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("ScriptObj+bottle: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }
}
]]></JavaScript>
        <CSharp><![CDATA[
// This script file has two CS classes.  The first is a simple Unity ]]><link ref="ScriptableObject">ScriptableObject</link><![CDATA[ script.
// The class it defines is used by the Example class below.
// (This is a single Unity script file. You could split this file into a ScriptObj.cs and an
// Example.cs file which is more structured.)]]><br /><br /><![CDATA[using UnityEngine;
using ]]><link ref="UnityEditor">UnityEditor</link><![CDATA[;]]><br /><br /><![CDATA[public class ScriptObj : ]]><link ref="ScriptableObject">ScriptableObject</link><![CDATA[
{
    public void Awake()
    {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("ScriptObj created");
    }
}]]><br /><br /><![CDATA[// Use ScriptObj to show how AssetDabase.FindAssets can be used]]><br /><br /><![CDATA[public class Example
{
    static ScriptObj testI;
    static ScriptObj testJ;
    static ScriptObj testK;]]><br /><br /><![CDATA[    []]><link ref="MenuItem">MenuItem</link><![CDATA[("Examples/FindAssets Example two")]
    static void ExampleScript()
    {
        CreateAssets();
        NamesExample();
        LabelsExample();
        TypesExample();
    }]]><br /><br /><![CDATA[    static void CreateAssets()
    {
        testI = (ScriptObj)]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(typeof(ScriptObj));
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testI, "Assets/AssetFolder/testI.asset");]]><br /><br /><![CDATA[        testJ = (ScriptObj)]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(typeof(ScriptObj));
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testJ, "Assets/AssetFolder/testJ.asset");]]><br /><br /><![CDATA[        // create an asset in a sub-folder and with a name which contains a space
        testK = (ScriptObj)]]><link ref="ScriptableObject.CreateInstance">ScriptableObject.CreateInstance</link><![CDATA[(typeof(ScriptObj));
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(testK, "Assets/AssetFolder/SpecialFolder/testK example.asset");]]><br /><br /><![CDATA[        // an asset with a material will be used later
        ]]><link ref="Material">Material</link><![CDATA[ material = new ]]><link ref="Material">Material</link><![CDATA[(]]><link ref="Shader.Find">Shader.Find</link><![CDATA[("Standard"));
        ]]><link ref="AssetDatabase.CreateAsset">AssetDatabase.CreateAsset</link><![CDATA[(material, "Assets/AssetFolder/SpecialFolder/MyMaterial.mat");
    }]]><br /><br /><![CDATA[    static void NamesExample()
    {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY NAME ***");]]><br /><br /><![CDATA[        string[] results;]]><br /><br /><![CDATA[        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testI");
        foreach (string guid in results)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testI: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }]]><br /><br /><![CDATA[        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testJ");
        foreach (string guid in results)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testJ: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }]]><br /><br /><![CDATA[        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("testK example");
        foreach (string guid in results)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("testK example: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }]]><br /><br /><![CDATA[        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** More complex asset search ***");]]><br /><br /><![CDATA[        // find all assets that contain test (which is all assets)
        results = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("test");
        foreach (string guid in results)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("name:test - " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }]]><br /><br /><![CDATA[    static void LabelsExample()
    {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY LABELS ***");]]><br /><br /><![CDATA[        string[] setLabels;]]><br /><br /><![CDATA[        setLabels = new string[] {"wrapper"};
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testI, setLabels);]]><br /><br /><![CDATA[        setLabels = new string[] {"bottle", "banana", "carrot"};
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testJ, setLabels);]]><br /><br /><![CDATA[        setLabels = new string[] {"swappable", "helmet"};
        ]]><link ref="AssetDatabase.SetLabels">AssetDatabase.SetLabels</link><![CDATA[(testK, setLabels);]]><br /><br /><![CDATA[        // label searching:
        //   testI has wrapper, testK has swappable, so both have 'app'
        //   testJ has bottle, so have a label searched as 'bot'
        string[] getGuids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("l:app l:bot");
        foreach (string guid in getGuids)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("label lookup: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }]]><br /><br /><![CDATA[    static void TypesExample()
    {
        ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("*** FINDING ASSETS BY TYPE ***");]]><br /><br /><![CDATA[        string[] guids;]]><br /><br /><![CDATA[        // search for a ScriptObject called ScriptObj
        guids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("t:ScriptObj");
        foreach (string guid in guids)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("ScriptObj: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }]]><br /><br /><![CDATA[        guids = ]]><link ref="AssetDatabase.FindAssets">AssetDatabase.FindAssets</link><![CDATA[("t:ScriptObj l:helmet");
        foreach (string guid in guids)
        {
            ]]><link ref="Debug.Log">Debug.Log</link><![CDATA[("ScriptObj+bottle: " + ]]><link ref="AssetDatabase.GUIDToAssetPath">AssetDatabase.GUIDToAssetPath</link><![CDATA[(guid));
        }
    }
}
]]></CSharp>
      </Example>
      <Example nocheck="false" convertexample="false">
        <Unconverted><![CDATA[
#pragma strict]]><br /><br /><![CDATA[// The following script is a simple class based on ]]><link ref="ScriptableObject">ScriptableObject</link><![CDATA[.  It
// is used by the script example above which needs a user provided class.]]><br /><br /><![CDATA[public class ScriptObjJS extends ]]><link ref="ScriptableObject">ScriptableObject</link><![CDATA[
{
    var f: float[];]]><br /><br /><![CDATA[    public function Awake()
    {
        var count: int = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(1000, 10000);
        f = new float[count];
        for (var i: int = 0; i < count; i++) {
            f[i] = ]]><link ref="Random.Range">Random.Range</link><![CDATA[(-1.0f, 1.0f);
        }
    }
}
]]></Unconverted>
      </Example>
    </Section>
  </Model>
</Root>
